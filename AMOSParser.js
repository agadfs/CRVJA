// Generated from AMOS.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import AMOSListener from './AMOSListener.js';
const serializedATN = [4,1,108,773,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,1,0,1,0,1,0,5,0,148,8,0,10,0,12,0,151,9,0,1,1,1,1,1,1,5,1,156,
8,1,10,1,12,1,159,9,1,1,2,1,2,1,2,5,2,164,8,2,10,2,12,2,167,9,2,1,3,1,3,
1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,185,8,4,1,5,
5,5,188,8,5,10,5,12,5,191,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,256,
8,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,285,8,12,1,12,
3,12,288,8,12,1,12,3,12,291,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,13,3,13,302,8,13,1,13,3,13,305,8,13,1,13,3,13,308,8,13,1,13,3,13,311,8,
13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,
1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,3,20,345,8,20,1,21,1,21,1,21,3,21,350,8,21,1,21,1,21,1,
21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,377,8,25,1,26,1,26,1,26,1,26,
1,26,1,26,1,26,1,27,1,27,5,27,388,8,27,10,27,12,27,391,9,27,1,27,1,27,1,
27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,406,8,29,1,29,
1,29,1,29,3,29,411,8,29,5,29,413,8,29,10,29,12,29,416,9,29,1,30,1,30,1,30,
1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,3,
31,435,8,31,1,31,3,31,438,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
32,3,32,449,8,32,1,33,1,33,1,33,3,33,454,8,33,1,33,1,33,1,33,1,33,1,33,1,
33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,3,34,478,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,3,35,494,8,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,3,37,
503,8,37,5,37,505,8,37,10,37,12,37,508,9,37,1,38,1,38,1,38,1,39,1,39,1,39,
1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,3,43,525,8,43,1,44,1,44,1,44,
1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,3,46,538,8,46,1,46,1,46,1,47,1,47,
1,47,1,47,1,47,3,47,547,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,48,556,
8,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,3,50,567,8,50,1,51,1,51,
1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,582,8,52,1,52,
1,52,5,52,586,8,52,10,52,12,52,589,9,52,1,52,3,52,592,8,52,1,53,1,53,1,53,
1,53,3,53,598,8,53,1,53,3,53,601,8,53,1,53,1,53,3,53,605,8,53,1,53,1,53,
1,54,1,54,1,54,3,54,612,8,54,1,54,5,54,615,8,54,10,54,12,54,618,9,54,1,55,
1,55,1,55,1,55,1,55,3,55,625,8,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,
60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,5,61,658,8,61,10,61,12,61,661,
9,61,1,61,1,61,1,62,1,62,1,62,5,62,668,8,62,10,62,12,62,671,9,62,1,62,1,
62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,5,63,682,8,63,10,63,12,63,685,9,63,
1,63,1,63,1,63,3,63,690,8,63,1,64,1,64,1,64,1,64,1,64,5,64,697,8,64,10,64,
12,64,700,9,64,1,64,1,64,1,64,1,64,3,64,706,8,64,1,65,1,65,5,65,710,8,65,
10,65,12,65,713,9,65,1,65,1,65,1,66,1,66,1,66,5,66,720,8,66,10,66,12,66,
723,9,66,1,66,1,66,3,66,727,8,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
1,67,1,68,1,68,1,68,1,68,3,68,742,8,68,1,68,1,68,5,68,746,8,68,10,68,12,
68,749,9,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,3,70,
762,8,70,1,71,1,71,1,71,1,71,5,71,768,8,71,10,71,12,71,771,9,71,1,71,2,414,
769,0,72,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
132,134,136,138,140,142,0,7,1,0,101,102,1,0,99,100,2,0,63,63,90,90,2,0,63,
63,73,73,1,0,20,25,1,0,64,65,2,0,66,66,104,104,826,0,144,1,0,0,0,2,152,1,
0,0,0,4,160,1,0,0,0,6,168,1,0,0,0,8,184,1,0,0,0,10,189,1,0,0,0,12,255,1,
0,0,0,14,257,1,0,0,0,16,260,1,0,0,0,18,263,1,0,0,0,20,267,1,0,0,0,22,270,
1,0,0,0,24,273,1,0,0,0,26,292,1,0,0,0,28,312,1,0,0,0,30,315,1,0,0,0,32,321,
1,0,0,0,34,325,1,0,0,0,36,329,1,0,0,0,38,332,1,0,0,0,40,335,1,0,0,0,42,346,
1,0,0,0,44,355,1,0,0,0,46,361,1,0,0,0,48,367,1,0,0,0,50,370,1,0,0,0,52,378,
1,0,0,0,54,385,1,0,0,0,56,398,1,0,0,0,58,402,1,0,0,0,60,417,1,0,0,0,62,431,
1,0,0,0,64,439,1,0,0,0,66,450,1,0,0,0,68,463,1,0,0,0,70,479,1,0,0,0,72,495,
1,0,0,0,74,498,1,0,0,0,76,509,1,0,0,0,78,512,1,0,0,0,80,515,1,0,0,0,82,517,
1,0,0,0,84,520,1,0,0,0,86,522,1,0,0,0,88,526,1,0,0,0,90,529,1,0,0,0,92,532,
1,0,0,0,94,541,1,0,0,0,96,550,1,0,0,0,98,560,1,0,0,0,100,562,1,0,0,0,102,
568,1,0,0,0,104,591,1,0,0,0,106,593,1,0,0,0,108,608,1,0,0,0,110,619,1,0,
0,0,112,630,1,0,0,0,114,641,1,0,0,0,116,643,1,0,0,0,118,645,1,0,0,0,120,
648,1,0,0,0,122,655,1,0,0,0,124,664,1,0,0,0,126,674,1,0,0,0,128,691,1,0,
0,0,130,707,1,0,0,0,132,716,1,0,0,0,134,728,1,0,0,0,136,737,1,0,0,0,138,
752,1,0,0,0,140,761,1,0,0,0,142,763,1,0,0,0,144,149,3,4,2,0,145,146,7,0,
0,0,146,148,3,4,2,0,147,145,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,
150,1,0,0,0,150,1,1,0,0,0,151,149,1,0,0,0,152,157,3,4,2,0,153,154,7,0,0,
0,154,156,3,4,2,0,155,153,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,
1,0,0,0,158,3,1,0,0,0,159,157,1,0,0,0,160,165,3,8,4,0,161,162,7,1,0,0,162,
164,3,8,4,0,163,161,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,
0,0,166,5,1,0,0,0,167,165,1,0,0,0,168,169,5,90,0,0,169,170,5,92,0,0,170,
171,3,2,1,0,171,172,5,93,0,0,172,7,1,0,0,0,173,185,5,63,0,0,174,185,3,6,
3,0,175,185,3,92,46,0,176,185,3,94,47,0,177,185,5,90,0,0,178,179,5,92,0,
0,179,180,3,2,1,0,180,181,5,93,0,0,181,185,1,0,0,0,182,183,5,98,0,0,183,
185,7,2,0,0,184,173,1,0,0,0,184,174,1,0,0,0,184,175,1,0,0,0,184,176,1,0,
0,0,184,177,1,0,0,0,184,178,1,0,0,0,184,182,1,0,0,0,185,9,1,0,0,0,186,188,
3,12,6,0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,
190,192,1,0,0,0,191,189,1,0,0,0,192,193,5,0,0,1,193,11,1,0,0,0,194,256,3,
136,68,0,195,256,3,112,56,0,196,256,3,114,57,0,197,256,3,110,55,0,198,256,
3,116,58,0,199,256,3,118,59,0,200,256,3,120,60,0,201,256,3,122,61,0,202,
256,3,126,63,0,203,256,3,42,21,0,204,256,3,132,66,0,205,256,3,128,64,0,206,
256,3,102,51,0,207,256,3,134,67,0,208,256,3,104,52,0,209,256,3,100,50,0,
210,256,3,124,62,0,211,256,3,98,49,0,212,256,3,96,48,0,213,256,5,1,0,0,214,
256,5,103,0,0,215,256,3,108,54,0,216,256,3,142,71,0,217,256,3,88,44,0,218,
256,3,90,45,0,219,256,3,86,43,0,220,256,3,84,42,0,221,256,3,82,41,0,222,
256,3,80,40,0,223,256,3,74,37,0,224,256,3,78,39,0,225,256,3,76,38,0,226,
256,3,72,36,0,227,256,3,66,33,0,228,256,3,68,34,0,229,256,3,70,35,0,230,
256,3,64,32,0,231,256,3,62,31,0,232,256,3,60,30,0,233,256,3,58,29,0,234,
256,3,56,28,0,235,256,3,54,27,0,236,256,3,52,26,0,237,256,3,44,22,0,238,
256,3,48,24,0,239,256,3,46,23,0,240,256,3,50,25,0,241,256,3,38,19,0,242,
256,3,40,20,0,243,256,3,36,18,0,244,256,3,34,17,0,245,256,3,32,16,0,246,
256,3,30,15,0,247,256,3,28,14,0,248,256,3,24,12,0,249,256,3,26,13,0,250,
256,3,22,11,0,251,256,3,20,10,0,252,256,3,18,9,0,253,256,3,16,8,0,254,256,
3,14,7,0,255,194,1,0,0,0,255,195,1,0,0,0,255,196,1,0,0,0,255,197,1,0,0,0,
255,198,1,0,0,0,255,199,1,0,0,0,255,200,1,0,0,0,255,201,1,0,0,0,255,202,
1,0,0,0,255,203,1,0,0,0,255,204,1,0,0,0,255,205,1,0,0,0,255,206,1,0,0,0,
255,207,1,0,0,0,255,208,1,0,0,0,255,209,1,0,0,0,255,210,1,0,0,0,255,211,
1,0,0,0,255,212,1,0,0,0,255,213,1,0,0,0,255,214,1,0,0,0,255,215,1,0,0,0,
255,216,1,0,0,0,255,217,1,0,0,0,255,218,1,0,0,0,255,219,1,0,0,0,255,220,
1,0,0,0,255,221,1,0,0,0,255,222,1,0,0,0,255,223,1,0,0,0,255,224,1,0,0,0,
255,225,1,0,0,0,255,226,1,0,0,0,255,227,1,0,0,0,255,228,1,0,0,0,255,229,
1,0,0,0,255,230,1,0,0,0,255,231,1,0,0,0,255,232,1,0,0,0,255,233,1,0,0,0,
255,234,1,0,0,0,255,235,1,0,0,0,255,236,1,0,0,0,255,237,1,0,0,0,255,238,
1,0,0,0,255,239,1,0,0,0,255,240,1,0,0,0,255,241,1,0,0,0,255,242,1,0,0,0,
255,243,1,0,0,0,255,244,1,0,0,0,255,245,1,0,0,0,255,246,1,0,0,0,255,247,
1,0,0,0,255,248,1,0,0,0,255,249,1,0,0,0,255,250,1,0,0,0,255,251,1,0,0,0,
255,252,1,0,0,0,255,253,1,0,0,0,255,254,1,0,0,0,256,13,1,0,0,0,257,258,5,
2,0,0,258,259,5,90,0,0,259,15,1,0,0,0,260,261,5,3,0,0,261,262,5,90,0,0,262,
17,1,0,0,0,263,264,5,4,0,0,264,265,5,5,0,0,265,266,5,6,0,0,266,19,1,0,0,
0,267,268,5,7,0,0,268,269,5,8,0,0,269,21,1,0,0,0,270,271,5,4,0,0,271,272,
5,9,0,0,272,23,1,0,0,0,273,274,5,10,0,0,274,275,5,11,0,0,275,276,7,3,0,0,
276,277,5,66,0,0,277,278,7,3,0,0,278,279,5,66,0,0,279,280,7,3,0,0,280,281,
5,66,0,0,281,282,7,3,0,0,282,284,5,66,0,0,283,285,7,3,0,0,284,283,1,0,0,
0,284,285,1,0,0,0,285,287,1,0,0,0,286,288,5,66,0,0,287,286,1,0,0,0,287,288,
1,0,0,0,288,290,1,0,0,0,289,291,7,3,0,0,290,289,1,0,0,0,290,291,1,0,0,0,
291,25,1,0,0,0,292,293,5,11,0,0,293,294,7,3,0,0,294,295,5,66,0,0,295,296,
7,3,0,0,296,297,5,66,0,0,297,298,7,3,0,0,298,299,5,66,0,0,299,301,7,3,0,
0,300,302,5,66,0,0,301,300,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,305,
7,3,0,0,304,303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,308,5,66,0,0,
307,306,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,311,7,3,0,0,310,309,
1,0,0,0,310,311,1,0,0,0,311,27,1,0,0,0,312,313,5,90,0,0,313,314,5,103,0,
0,314,29,1,0,0,0,315,316,5,8,0,0,316,317,5,12,0,0,317,318,5,63,0,0,318,319,
5,66,0,0,319,320,5,63,0,0,320,31,1,0,0,0,321,322,5,13,0,0,322,323,5,14,0,
0,323,324,5,15,0,0,324,33,1,0,0,0,325,326,5,13,0,0,326,327,5,16,0,0,327,
328,5,63,0,0,328,35,1,0,0,0,329,330,5,17,0,0,330,331,5,15,0,0,331,37,1,0,
0,0,332,333,5,18,0,0,333,334,5,73,0,0,334,39,1,0,0,0,335,344,5,19,0,0,336,
337,5,63,0,0,337,338,5,66,0,0,338,339,7,2,0,0,339,340,5,66,0,0,340,341,7,
2,0,0,341,342,5,66,0,0,342,345,7,2,0,0,343,345,5,9,0,0,344,336,1,0,0,0,344,
343,1,0,0,0,345,41,1,0,0,0,346,347,5,79,0,0,347,349,3,2,1,0,348,350,7,4,
0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,3,0,0,0,352,
353,5,26,0,0,353,354,3,12,6,0,354,43,1,0,0,0,355,356,5,27,0,0,356,357,5,
28,0,0,357,358,5,63,0,0,358,359,5,66,0,0,359,360,5,90,0,0,360,45,1,0,0,0,
361,362,5,27,0,0,362,363,5,29,0,0,363,364,5,63,0,0,364,365,5,66,0,0,365,
366,5,90,0,0,366,47,1,0,0,0,367,368,5,30,0,0,368,369,5,63,0,0,369,49,1,0,
0,0,370,371,5,31,0,0,371,372,5,106,0,0,372,373,5,63,0,0,373,374,5,66,0,0,
374,376,5,90,0,0,375,377,5,98,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,51,
1,0,0,0,378,379,5,32,0,0,379,380,5,92,0,0,380,381,3,2,1,0,381,382,5,66,0,
0,382,383,3,2,1,0,383,384,5,93,0,0,384,53,1,0,0,0,385,389,5,33,0,0,386,388,
3,12,6,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,
390,392,1,0,0,0,391,389,1,0,0,0,392,393,5,34,0,0,393,394,5,35,0,0,394,395,
5,8,0,0,395,396,5,20,0,0,396,397,5,63,0,0,397,55,1,0,0,0,398,399,5,10,0,
0,399,400,5,36,0,0,400,401,5,63,0,0,401,57,1,0,0,0,402,405,5,37,0,0,403,
406,3,106,53,0,404,406,5,90,0,0,405,403,1,0,0,0,405,404,1,0,0,0,406,414,
1,0,0,0,407,410,5,66,0,0,408,411,3,106,53,0,409,411,5,90,0,0,410,408,1,0,
0,0,410,409,1,0,0,0,411,413,1,0,0,0,412,407,1,0,0,0,413,416,1,0,0,0,414,
415,1,0,0,0,414,412,1,0,0,0,415,59,1,0,0,0,416,414,1,0,0,0,417,418,5,38,
0,0,418,419,5,39,0,0,419,420,3,2,1,0,420,421,5,66,0,0,421,422,3,2,1,0,422,
423,5,77,0,0,423,424,3,2,1,0,424,425,5,66,0,0,425,426,3,2,1,0,426,427,5,
66,0,0,427,428,3,2,1,0,428,429,5,66,0,0,429,430,3,2,1,0,430,61,1,0,0,0,431,
432,5,40,0,0,432,434,5,63,0,0,433,435,5,66,0,0,434,433,1,0,0,0,434,435,1,
0,0,0,435,437,1,0,0,0,436,438,5,63,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,
63,1,0,0,0,439,440,5,41,0,0,440,441,5,90,0,0,441,442,5,66,0,0,442,448,3,
2,1,0,443,444,5,66,0,0,444,445,3,2,1,0,445,446,5,77,0,0,446,447,5,42,0,0,
447,449,1,0,0,0,448,443,1,0,0,0,448,449,1,0,0,0,449,65,1,0,0,0,450,451,5,
43,0,0,451,453,5,44,0,0,452,454,5,45,0,0,453,452,1,0,0,0,453,454,1,0,0,0,
454,455,1,0,0,0,455,456,5,63,0,0,456,457,5,66,0,0,457,458,5,63,0,0,458,459,
5,77,0,0,459,460,5,63,0,0,460,461,5,66,0,0,461,462,5,63,0,0,462,67,1,0,0,
0,463,464,5,43,0,0,464,465,5,46,0,0,465,466,5,63,0,0,466,467,5,66,0,0,467,
477,5,63,0,0,468,469,5,66,0,0,469,470,3,2,1,0,470,471,5,66,0,0,471,472,3,
2,1,0,472,473,5,66,0,0,473,474,3,2,1,0,474,475,5,66,0,0,475,476,3,2,1,0,
476,478,1,0,0,0,477,468,1,0,0,0,477,478,1,0,0,0,478,69,1,0,0,0,479,480,5,
43,0,0,480,481,5,7,0,0,481,482,5,63,0,0,482,483,5,66,0,0,483,493,5,63,0,
0,484,485,5,66,0,0,485,486,3,2,1,0,486,487,5,66,0,0,487,488,3,2,1,0,488,
489,5,77,0,0,489,490,3,2,1,0,490,491,5,66,0,0,491,492,3,2,1,0,492,494,1,
0,0,0,493,484,1,0,0,0,493,494,1,0,0,0,494,71,1,0,0,0,495,496,5,47,0,0,496,
497,5,63,0,0,497,73,1,0,0,0,498,506,5,48,0,0,499,500,5,98,0,0,500,502,7,
2,0,0,501,503,5,66,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,
499,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,75,1,0,0,
0,508,506,1,0,0,0,509,510,5,49,0,0,510,511,5,50,0,0,511,77,1,0,0,0,512,513,
5,51,0,0,513,514,5,63,0,0,514,79,1,0,0,0,515,516,5,52,0,0,516,81,1,0,0,0,
517,518,5,53,0,0,518,519,5,63,0,0,519,83,1,0,0,0,520,521,5,54,0,0,521,85,
1,0,0,0,522,524,5,55,0,0,523,525,5,6,0,0,524,523,1,0,0,0,524,525,1,0,0,0,
525,87,1,0,0,0,526,527,5,56,0,0,527,528,5,9,0,0,528,89,1,0,0,0,529,530,5,
56,0,0,530,531,5,6,0,0,531,91,1,0,0,0,532,533,5,57,0,0,533,537,5,92,0,0,
534,538,5,63,0,0,535,538,5,90,0,0,536,538,3,2,1,0,537,534,1,0,0,0,537,535,
1,0,0,0,537,536,1,0,0,0,538,539,1,0,0,0,539,540,5,93,0,0,540,93,1,0,0,0,
541,542,5,58,0,0,542,546,5,92,0,0,543,547,5,63,0,0,544,547,5,90,0,0,545,
547,3,2,1,0,546,543,1,0,0,0,546,544,1,0,0,0,546,545,1,0,0,0,547,548,1,0,
0,0,548,549,5,93,0,0,549,95,1,0,0,0,550,555,5,84,0,0,551,552,5,98,0,0,552,
556,5,63,0,0,553,556,3,2,1,0,554,556,5,90,0,0,555,551,1,0,0,0,555,553,1,
0,0,0,555,554,1,0,0,0,556,557,1,0,0,0,557,558,5,66,0,0,558,559,5,63,0,0,
559,97,1,0,0,0,560,561,5,88,0,0,561,99,1,0,0,0,562,563,5,90,0,0,563,566,
5,20,0,0,564,567,3,52,26,0,565,567,3,2,1,0,566,564,1,0,0,0,566,565,1,0,0,
0,567,101,1,0,0,0,568,569,5,90,0,0,569,570,5,94,0,0,570,571,7,2,0,0,571,
572,5,95,0,0,572,103,1,0,0,0,573,574,5,90,0,0,574,575,5,94,0,0,575,576,3,
2,1,0,576,577,5,95,0,0,577,592,1,0,0,0,578,579,5,90,0,0,579,581,5,92,0,0,
580,582,3,2,1,0,581,580,1,0,0,0,581,582,1,0,0,0,582,587,1,0,0,0,583,584,
5,66,0,0,584,586,3,2,1,0,585,583,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,0,
587,588,1,0,0,0,588,590,1,0,0,0,589,587,1,0,0,0,590,592,5,93,0,0,591,573,
1,0,0,0,591,578,1,0,0,0,592,105,1,0,0,0,593,594,5,90,0,0,594,597,5,92,0,
0,595,598,5,63,0,0,596,598,3,2,1,0,597,595,1,0,0,0,597,596,1,0,0,0,598,600,
1,0,0,0,599,601,5,66,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,604,1,0,0,0,
602,605,5,63,0,0,603,605,3,2,1,0,604,602,1,0,0,0,604,603,1,0,0,0,604,605,
1,0,0,0,605,606,1,0,0,0,606,607,5,93,0,0,607,107,1,0,0,0,608,609,5,59,0,
0,609,616,3,106,53,0,610,612,5,66,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,
613,1,0,0,0,613,615,3,106,53,0,614,611,1,0,0,0,615,618,1,0,0,0,616,614,1,
0,0,0,616,617,1,0,0,0,617,109,1,0,0,0,618,616,1,0,0,0,619,620,5,90,0,0,620,
624,5,92,0,0,621,625,5,63,0,0,622,625,5,90,0,0,623,625,3,2,1,0,624,621,1,
0,0,0,624,622,1,0,0,0,624,623,1,0,0,0,625,626,1,0,0,0,626,627,5,93,0,0,627,
628,5,20,0,0,628,629,3,2,1,0,629,111,1,0,0,0,630,631,5,62,0,0,631,632,5,
63,0,0,632,633,5,66,0,0,633,634,5,63,0,0,634,635,5,66,0,0,635,636,5,63,0,
0,636,637,5,66,0,0,637,638,5,63,0,0,638,639,5,66,0,0,639,640,7,5,0,0,640,
113,1,0,0,0,641,642,5,69,0,0,642,115,1,0,0,0,643,644,5,70,0,0,644,117,1,
0,0,0,645,646,5,71,0,0,646,647,5,63,0,0,647,119,1,0,0,0,648,649,5,72,0,0,
649,650,5,63,0,0,650,651,5,66,0,0,651,652,5,63,0,0,652,653,5,66,0,0,653,
654,5,73,0,0,654,121,1,0,0,0,655,659,5,74,0,0,656,658,3,12,6,0,657,656,1,
0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,662,1,0,0,0,661,
659,1,0,0,0,662,663,5,75,0,0,663,123,1,0,0,0,664,665,5,82,0,0,665,669,3,
138,69,0,666,668,3,12,6,0,667,666,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,
0,669,670,1,0,0,0,670,672,1,0,0,0,671,669,1,0,0,0,672,673,5,83,0,0,673,125,
1,0,0,0,674,675,5,76,0,0,675,676,5,90,0,0,676,677,5,20,0,0,677,678,5,63,
0,0,678,679,5,77,0,0,679,683,5,63,0,0,680,682,3,12,6,0,681,680,1,0,0,0,682,
685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,689,1,0,0,0,685,683,1,0,
0,0,686,687,5,78,0,0,687,690,5,90,0,0,688,690,5,78,0,0,689,686,1,0,0,0,689,
688,1,0,0,0,690,127,1,0,0,0,691,692,5,79,0,0,692,693,3,2,1,0,693,694,7,4,
0,0,694,698,3,0,0,0,695,697,3,12,6,0,696,695,1,0,0,0,697,700,1,0,0,0,698,
696,1,0,0,0,698,699,1,0,0,0,699,705,1,0,0,0,700,698,1,0,0,0,701,702,5,1,
0,0,702,706,5,60,0,0,703,706,3,130,65,0,704,706,5,81,0,0,705,701,1,0,0,0,
705,703,1,0,0,0,705,704,1,0,0,0,706,129,1,0,0,0,707,711,5,80,0,0,708,710,
3,12,6,0,709,708,1,0,0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,
712,714,1,0,0,0,713,711,1,0,0,0,714,715,5,81,0,0,715,131,1,0,0,0,716,717,
5,79,0,0,717,721,3,138,69,0,718,720,3,12,6,0,719,718,1,0,0,0,720,723,1,0,
0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,726,1,0,0,0,723,721,1,0,0,0,724,
727,3,130,65,0,725,727,5,81,0,0,726,724,1,0,0,0,726,725,1,0,0,0,727,133,
1,0,0,0,728,729,5,87,0,0,729,730,3,2,1,0,730,731,5,66,0,0,731,732,3,0,0,
0,732,733,5,77,0,0,733,734,3,2,1,0,734,735,5,66,0,0,735,736,3,0,0,0,736,
135,1,0,0,0,737,738,5,85,0,0,738,739,5,90,0,0,739,741,5,94,0,0,740,742,5,
90,0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,747,5,95,0,0,
744,746,3,12,6,0,745,744,1,0,0,0,746,749,1,0,0,0,747,745,1,0,0,0,747,748,
1,0,0,0,748,750,1,0,0,0,749,747,1,0,0,0,750,751,5,86,0,0,751,137,1,0,0,0,
752,753,5,89,0,0,753,754,5,92,0,0,754,755,3,2,1,0,755,756,5,93,0,0,756,139,
1,0,0,0,757,762,3,2,1,0,758,762,5,73,0,0,759,760,5,106,0,0,760,762,5,63,
0,0,761,757,1,0,0,0,761,758,1,0,0,0,761,759,1,0,0,0,762,141,1,0,0,0,763,
764,5,61,0,0,764,769,3,140,70,0,765,766,7,6,0,0,766,768,3,140,70,0,767,765,
1,0,0,0,768,771,1,0,0,0,769,770,1,0,0,0,769,767,1,0,0,0,770,143,1,0,0,0,
771,769,1,0,0,0,55,149,157,165,184,189,255,284,287,290,301,304,307,310,344,
349,376,389,405,410,414,434,437,448,453,477,493,502,506,524,537,546,555,
566,581,587,591,597,600,604,611,616,624,659,669,683,689,698,705,711,721,
726,741,747,761,769];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class AMOSParser extends antlr4.Parser {

    static grammarFileName = "AMOS.g4";
    static literalNames = [ null, "'End'", "'Goto'", "'Gosub'", "'Bob'", 
                            "'Update'", "'On'", "'Clear'", "'Key'", "'Off'", 
                            "'Set'", "'Rainbow'", "'Speed'", "'SAM'", "'LOOP'", 
                            "'OFF'", "'BANK'", "'LED'", "'Load'", "'Sprite'", 
                            "'='", "'<>'", "'>='", "'>'", "'<='", "'<'", 
                            "'then'", "'Open'", "'Out'", "'In'", "'Close'", 
                            "'Input'", "'Btst'", "'Repeat'", "'Until'", 
                            "'Mouse'", "'Buffers'", "'Global'", "'Turbo'", 
                            "'Draw'", "'Locate'", "'Add'", "'NUMBER'", "'Blitter'", 
                            "'Copy'", "'Limit'", "'Fill'", "'Autoback'", 
                            "'Palette'", "'Double'", "'Buffer'", "'Pen'", 
                            "'Cls'", "'Paper'", "'Degree'", "'Hide'", "'Flash'", 
                            "'Sin'", "'Cos'", "'Dim'", "'if'", "'Print'", 
                            "'Screen Open'", null, "'Lowres'", "'Hires'", 
                            "','", null, null, "'Curs Off'", "'Curs On'", 
                            "'Ink'", "'Text'", null, "'Do'", "'Loop'", "'For'", 
                            "'To'", "'Next'", "'If'", "'Else'", "'End If'", 
                            "'While'", "'Wend'", "'Play'", "'Procedure'", 
                            "'End Proc'", "'Bar'", "'Wait Key'", "'Key State'", 
                            null, null, "'('", "')'", "'['", "']'", "'{'", 
                            "'}'", "'$'", "'*'", "'/'", "'+'", "'-'", "':'", 
                            "';'", "'.'", "'#'", "'%'", "'?'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, "SCREENOPEN", 
                             "NUMBER", "LOWRES", "HIRES", "COMMA", "COMMENT", 
                             "WS", "CURSOFF", "CURSON", "INK", "TEXT", "STRING", 
                             "DO", "LOOP", "FOR", "TO", "NEXT", "IF", "ELSE", 
                             "ENDIF", "WHILE", "WEND", "PLAY", "PROC", "ENDPROC", 
                             "BAR", "WAITKEY", "KEYSTATE", "IDENTIFIER", 
                             "COMPARISON", "BRACKETOPEN_PROP", "BRACKETCLOSE_PROP", 
                             "BRACKETOPEN_ARRAY", "BRACKETCLOSE_ARRAY", 
                             "BRACKETOPEN_FUNCTION", "BRACKETCLOSE_FUNCTION", 
                             "HECADECIMAL", "MULTIPLY", "DIVIDE", "ADD", 
                             "SUBTRACT", "STATEMENT_SEPARATOR", "FINISH_AND_ADD_OTHER_STATEMENT", 
                             "DOT", "HASHTAG", "PERCENT", "QUESTION" ];
    static ruleNames = [ "expression2", "expression1", "term", "array_index_get", 
                         "factor", "program", "statement", "goto_label", 
                         "gosub", "bob_update_on", "clear_key", "bob_off", 
                         "set_rainbow", "use_rainbow", "label_title", "key_speed", 
                         "sam_loop", "sam_bank", "led_off", "loadBank", 
                         "loadBankImgToSprite", "if_then", "open_out_readfile", 
                         "open_in_writefile", "close_file", "input_variable", 
                         "btst", "repeat_key", "set_buffer", "global", "turbo_draw", 
                         "locate", "add", "blitter_copy", "blitter_fill", 
                         "blitter_clear", "autoback", "palette", "double_buffer", 
                         "pen", "cls", "paper", "degree", "hide", "flash_off", 
                         "flash_on", "sin_function", "cos_function", "play_sound", 
                         "wait_key_break", "variable_starter", "function_starter", 
                         "function_call_or_array_access", "array_structure", 
                         "array_create", "array_update", "screen_open", 
                         "curs_off", "curs_on", "ink", "text", "do_loop", 
                         "while_wend", "for_loop", "if_statement", "else_statement", 
                         "if_statement_key_state", "bar", "procedure", "current_Key_State", 
                         "print_options", "print_something" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = AMOSParser.ruleNames;
        this.literalNames = AMOSParser.literalNames;
        this.symbolicNames = AMOSParser.symbolicNames;
    }



	expression2() {
	    let localctx = new Expression2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, AMOSParser.RULE_expression2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 144;
	        this.term();
	        this.state = 149;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===101 || _la===102) {
	            this.state = 145;
	            _la = this._input.LA(1);
	            if(!(_la===101 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 146;
	            this.term();
	            this.state = 151;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression1() {
	    let localctx = new Expression1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, AMOSParser.RULE_expression1);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 152;
	        this.term();
	        this.state = 157;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===101 || _la===102) {
	            this.state = 153;
	            _la = this._input.LA(1);
	            if(!(_la===101 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 154;
	            this.term();
	            this.state = 159;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, AMOSParser.RULE_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 160;
	        this.factor();
	        this.state = 165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===99 || _la===100) {
	            this.state = 161;
	            _la = this._input.LA(1);
	            if(!(_la===99 || _la===100)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 162;
	            this.factor();
	            this.state = 167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_index_get() {
	    let localctx = new Array_index_getContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, AMOSParser.RULE_array_index_get);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 168;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 169;
	        this.match(AMOSParser.BRACKETOPEN_PROP);

	        this.state = 170;
	        this.expression1();
	        this.state = 171;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, AMOSParser.RULE_factor);
	    var _la = 0;
	    try {
	        this.state = 184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 173;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 174;
	            this.array_index_get();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 175;
	            this.sin_function();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 176;
	            this.cos_function();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 177;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 178;
	            this.match(AMOSParser.BRACKETOPEN_PROP);
	            this.state = 179;
	            this.expression1();
	            this.state = 180;
	            this.match(AMOSParser.BRACKETCLOSE_PROP);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 182;
	            this.match(AMOSParser.HECADECIMAL);
	            this.state = 183;
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===90)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, AMOSParser.RULE_program);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356372382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1778092899) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2991279) !== 0) || _la===103) {
	            this.state = 186;
	            this.statement();
	            this.state = 191;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 192;
	        this.match(AMOSParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, AMOSParser.RULE_statement);
	    try {
	        this.state = 255;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 194;
	            this.procedure();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 195;
	            this.screen_open();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 196;
	            this.curs_off();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 197;
	            this.array_update();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 198;
	            this.curs_on();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 199;
	            this.ink();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 200;
	            this.text();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 201;
	            this.do_loop();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 202;
	            this.for_loop();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 203;
	            this.if_then();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 204;
	            this.if_statement_key_state();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 205;
	            this.if_statement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 206;
	            this.function_starter();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 207;
	            this.bar();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 208;
	            this.function_call_or_array_access();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 209;
	            this.variable_starter();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 210;
	            this.while_wend();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 211;
	            this.wait_key_break();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 212;
	            this.play_sound();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 213;
	            this.match(AMOSParser.T__0);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 214;
	            this.match(AMOSParser.STATEMENT_SEPARATOR);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 215;
	            this.array_create();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 216;
	            this.print_something();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 217;
	            this.flash_off();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 218;
	            this.flash_on();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 219;
	            this.hide();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 220;
	            this.degree();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 221;
	            this.paper();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 222;
	            this.cls();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 223;
	            this.palette();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 224;
	            this.pen();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 225;
	            this.double_buffer();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 226;
	            this.autoback();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 227;
	            this.blitter_copy();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 228;
	            this.blitter_fill();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 229;
	            this.blitter_clear();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 230;
	            this.add();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 231;
	            this.locate();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 232;
	            this.turbo_draw();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 233;
	            this.global();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 234;
	            this.set_buffer();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 235;
	            this.repeat_key();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 236;
	            this.btst();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 237;
	            this.open_out_readfile();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 238;
	            this.close_file();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 239;
	            this.open_in_writefile();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 240;
	            this.input_variable();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 241;
	            this.loadBank();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 242;
	            this.loadBankImgToSprite();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 243;
	            this.led_off();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 244;
	            this.sam_bank();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 245;
	            this.sam_loop();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 246;
	            this.key_speed();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 247;
	            this.label_title();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 248;
	            this.set_rainbow();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 249;
	            this.use_rainbow();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 250;
	            this.bob_off();
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 251;
	            this.clear_key();
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 252;
	            this.bob_update_on();
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 253;
	            this.gosub();
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 254;
	            this.goto_label();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goto_label() {
	    let localctx = new Goto_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, AMOSParser.RULE_goto_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 257;
	        this.match(AMOSParser.T__1);
	        this.state = 258;
	        this.match(AMOSParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gosub() {
	    let localctx = new GosubContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, AMOSParser.RULE_gosub);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 260;
	        this.match(AMOSParser.T__2);
	        this.state = 261;
	        this.match(AMOSParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bob_update_on() {
	    let localctx = new Bob_update_onContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, AMOSParser.RULE_bob_update_on);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 263;
	        this.match(AMOSParser.T__3);
	        this.state = 264;
	        this.match(AMOSParser.T__4);
	        this.state = 265;
	        this.match(AMOSParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clear_key() {
	    let localctx = new Clear_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, AMOSParser.RULE_clear_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        this.match(AMOSParser.T__6);
	        this.state = 268;
	        this.match(AMOSParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bob_off() {
	    let localctx = new Bob_offContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, AMOSParser.RULE_bob_off);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 270;
	        this.match(AMOSParser.T__3);
	        this.state = 271;
	        this.match(AMOSParser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_rainbow() {
	    let localctx = new Set_rainbowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, AMOSParser.RULE_set_rainbow);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        this.match(AMOSParser.T__9);
	        this.state = 274;
	        this.match(AMOSParser.T__10);
	        this.state = 275;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 276;
	        this.match(AMOSParser.COMMA);
	        this.state = 277;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 278;
	        this.match(AMOSParser.COMMA);
	        this.state = 279;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 280;
	        this.match(AMOSParser.COMMA);
	        this.state = 281;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 282;
	        this.match(AMOSParser.COMMA);
	        this.state = 284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        if(la_===1) {
	            this.state = 283;
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 286;
	            this.match(AMOSParser.COMMA);
	        }

	        this.state = 290;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63 || _la===73) {
	            this.state = 289;
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_rainbow() {
	    let localctx = new Use_rainbowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, AMOSParser.RULE_use_rainbow);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 292;
	        this.match(AMOSParser.T__10);
	        this.state = 293;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 294;
	        this.match(AMOSParser.COMMA);
	        this.state = 295;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 296;
	        this.match(AMOSParser.COMMA);
	        this.state = 297;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 298;
	        this.match(AMOSParser.COMMA);
	        this.state = 299;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        if(la_===1) {
	            this.state = 300;
	            this.match(AMOSParser.COMMA);

	        }
	        this.state = 304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        if(la_===1) {
	            this.state = 303;
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 307;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 306;
	            this.match(AMOSParser.COMMA);
	        }

	        this.state = 310;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63 || _la===73) {
	            this.state = 309;
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label_title() {
	    let localctx = new Label_titleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, AMOSParser.RULE_label_title);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 312;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 313;
	        this.match(AMOSParser.STATEMENT_SEPARATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_speed() {
	    let localctx = new Key_speedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, AMOSParser.RULE_key_speed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315;
	        this.match(AMOSParser.T__7);
	        this.state = 316;
	        this.match(AMOSParser.T__11);
	        this.state = 317;
	        this.match(AMOSParser.NUMBER);
	        this.state = 318;
	        this.match(AMOSParser.COMMA);
	        this.state = 319;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sam_loop() {
	    let localctx = new Sam_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, AMOSParser.RULE_sam_loop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 321;
	        this.match(AMOSParser.T__12);
	        this.state = 322;
	        this.match(AMOSParser.T__13);
	        this.state = 323;
	        this.match(AMOSParser.T__14);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sam_bank() {
	    let localctx = new Sam_bankContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, AMOSParser.RULE_sam_bank);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 325;
	        this.match(AMOSParser.T__12);
	        this.state = 326;
	        this.match(AMOSParser.T__15);
	        this.state = 327;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	led_off() {
	    let localctx = new Led_offContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, AMOSParser.RULE_led_off);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 329;
	        this.match(AMOSParser.T__16);
	        this.state = 330;
	        this.match(AMOSParser.T__14);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadBank() {
	    let localctx = new LoadBankContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, AMOSParser.RULE_loadBank);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 332;
	        this.match(AMOSParser.T__17);
	        this.state = 333;
	        this.match(AMOSParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadBankImgToSprite() {
	    let localctx = new LoadBankImgToSpriteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, AMOSParser.RULE_loadBankImgToSprite);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 335;
	        this.match(AMOSParser.T__18);
	        this.state = 344;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 63:
	            this.state = 336;
	            this.match(AMOSParser.NUMBER);
	            this.state = 337;
	            this.match(AMOSParser.COMMA);
	            this.state = 338;
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===90)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 339;
	            this.match(AMOSParser.COMMA);
	            this.state = 340;
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===90)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 341;
	            this.match(AMOSParser.COMMA);
	            this.state = 342;
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===90)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 9:
	            this.state = 343;
	            this.match(AMOSParser.T__8);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_then() {
	    let localctx = new If_thenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, AMOSParser.RULE_if_then);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 346;
	        this.match(AMOSParser.IF);
	        this.state = 347;
	        this.expression1();
	        this.state = 349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 66060288) !== 0)) {
	            this.state = 348;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 66060288) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 351;
	        this.expression2();
	        this.state = 352;
	        this.match(AMOSParser.T__25);
	        this.state = 353;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	open_out_readfile() {
	    let localctx = new Open_out_readfileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, AMOSParser.RULE_open_out_readfile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 355;
	        this.match(AMOSParser.T__26);
	        this.state = 356;
	        this.match(AMOSParser.T__27);
	        this.state = 357;
	        this.match(AMOSParser.NUMBER);
	        this.state = 358;
	        this.match(AMOSParser.COMMA);
	        this.state = 359;
	        this.match(AMOSParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	open_in_writefile() {
	    let localctx = new Open_in_writefileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, AMOSParser.RULE_open_in_writefile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 361;
	        this.match(AMOSParser.T__26);
	        this.state = 362;
	        this.match(AMOSParser.T__28);
	        this.state = 363;
	        this.match(AMOSParser.NUMBER);
	        this.state = 364;
	        this.match(AMOSParser.COMMA);
	        this.state = 365;
	        this.match(AMOSParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	close_file() {
	    let localctx = new Close_fileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, AMOSParser.RULE_close_file);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 367;
	        this.match(AMOSParser.T__29);
	        this.state = 368;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	input_variable() {
	    let localctx = new Input_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, AMOSParser.RULE_input_variable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 370;
	        this.match(AMOSParser.T__30);
	        this.state = 371;
	        this.match(AMOSParser.HASHTAG);
	        this.state = 372;
	        this.match(AMOSParser.NUMBER);
	        this.state = 373;
	        this.match(AMOSParser.COMMA);
	        this.state = 374;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 375;
	            this.match(AMOSParser.HECADECIMAL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	btst() {
	    let localctx = new BtstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, AMOSParser.RULE_btst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 378;
	        this.match(AMOSParser.T__31);
	        this.state = 379;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 380;
	        this.expression1();
	        this.state = 381;
	        this.match(AMOSParser.COMMA);
	        this.state = 382;
	        this.expression1();
	        this.state = 383;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeat_key() {
	    let localctx = new Repeat_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, AMOSParser.RULE_repeat_key);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 385;
	        this.match(AMOSParser.T__32);
	        this.state = 389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356372382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1778092899) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2991279) !== 0) || _la===103) {
	            this.state = 386;
	            this.statement();
	            this.state = 391;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 392;
	        this.match(AMOSParser.T__33);
	        this.state = 393;
	        this.match(AMOSParser.T__34);
	        this.state = 394;
	        this.match(AMOSParser.T__7);
	        this.state = 395;
	        this.match(AMOSParser.T__19);
	        this.state = 396;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_buffer() {
	    let localctx = new Set_bufferContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, AMOSParser.RULE_set_buffer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 398;
	        this.match(AMOSParser.T__9);
	        this.state = 399;
	        this.match(AMOSParser.T__35);
	        this.state = 400;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global() {
	    let localctx = new GlobalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, AMOSParser.RULE_global);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 402;
	        this.match(AMOSParser.T__36);
	        this.state = 405;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 403;
	            this.array_structure();
	            break;

	        case 2:
	            this.state = 404;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        }
	        this.state = 414;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 407;
	                this.match(AMOSParser.COMMA);
	                this.state = 410;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 408;
	                    this.array_structure();
	                    break;

	                case 2:
	                    this.state = 409;
	                    this.match(AMOSParser.IDENTIFIER);
	                    break;

	                } 
	            }
	            this.state = 416;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	turbo_draw() {
	    let localctx = new Turbo_drawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, AMOSParser.RULE_turbo_draw);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 417;
	        this.match(AMOSParser.T__37);
	        this.state = 418;
	        this.match(AMOSParser.T__38);
	        this.state = 419;
	        this.expression1();
	        this.state = 420;
	        this.match(AMOSParser.COMMA);
	        this.state = 421;
	        this.expression1();
	        this.state = 422;
	        this.match(AMOSParser.TO);
	        this.state = 423;
	        this.expression1();
	        this.state = 424;
	        this.match(AMOSParser.COMMA);
	        this.state = 425;
	        this.expression1();
	        this.state = 426;
	        this.match(AMOSParser.COMMA);
	        this.state = 427;
	        this.expression1();
	        this.state = 428;
	        this.match(AMOSParser.COMMA);
	        this.state = 429;
	        this.expression1();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	locate() {
	    let localctx = new LocateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, AMOSParser.RULE_locate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 431;
	        this.match(AMOSParser.T__39);
	        this.state = 432;
	        this.match(AMOSParser.NUMBER);
	        this.state = 434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 433;
	            this.match(AMOSParser.COMMA);
	        }

	        this.state = 437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63) {
	            this.state = 436;
	            this.match(AMOSParser.NUMBER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add() {
	    let localctx = new AddContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, AMOSParser.RULE_add);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 439;
	        this.match(AMOSParser.T__40);
	        this.state = 440;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 441;
	        this.match(AMOSParser.COMMA);
	        this.state = 442;
	        this.expression1();
	        this.state = 448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 443;
	            this.match(AMOSParser.COMMA);
	            this.state = 444;
	            this.expression1();
	            this.state = 445;
	            this.match(AMOSParser.TO);
	            this.state = 446;
	            this.match(AMOSParser.T__41);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blitter_copy() {
	    let localctx = new Blitter_copyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, AMOSParser.RULE_blitter_copy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.match(AMOSParser.T__42);
	        this.state = 451;
	        this.match(AMOSParser.T__43);
	        this.state = 453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 452;
	            this.match(AMOSParser.T__44);
	        }

	        this.state = 455;
	        this.match(AMOSParser.NUMBER);
	        this.state = 456;
	        this.match(AMOSParser.COMMA);
	        this.state = 457;
	        this.match(AMOSParser.NUMBER);
	        this.state = 458;
	        this.match(AMOSParser.TO);
	        this.state = 459;
	        this.match(AMOSParser.NUMBER);
	        this.state = 460;
	        this.match(AMOSParser.COMMA);
	        this.state = 461;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blitter_fill() {
	    let localctx = new Blitter_fillContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, AMOSParser.RULE_blitter_fill);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this.match(AMOSParser.T__42);
	        this.state = 464;
	        this.match(AMOSParser.T__45);
	        this.state = 465;
	        this.match(AMOSParser.NUMBER);
	        this.state = 466;
	        this.match(AMOSParser.COMMA);
	        this.state = 467;
	        this.match(AMOSParser.NUMBER);
	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 468;
	            this.match(AMOSParser.COMMA);
	            this.state = 469;
	            this.expression1();
	            this.state = 470;
	            this.match(AMOSParser.COMMA);
	            this.state = 471;
	            this.expression1();
	            this.state = 472;
	            this.match(AMOSParser.COMMA);
	            this.state = 473;
	            this.expression1();
	            this.state = 474;
	            this.match(AMOSParser.COMMA);
	            this.state = 475;
	            this.expression1();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blitter_clear() {
	    let localctx = new Blitter_clearContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, AMOSParser.RULE_blitter_clear);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        this.match(AMOSParser.T__42);
	        this.state = 480;
	        this.match(AMOSParser.T__6);
	        this.state = 481;
	        this.match(AMOSParser.NUMBER);
	        this.state = 482;
	        this.match(AMOSParser.COMMA);
	        this.state = 483;
	        this.match(AMOSParser.NUMBER);
	        this.state = 493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 484;
	            this.match(AMOSParser.COMMA);
	            this.state = 485;
	            this.expression1();
	            this.state = 486;
	            this.match(AMOSParser.COMMA);
	            this.state = 487;
	            this.expression1();
	            this.state = 488;
	            this.match(AMOSParser.TO);
	            this.state = 489;
	            this.expression1();
	            this.state = 490;
	            this.match(AMOSParser.COMMA);
	            this.state = 491;
	            this.expression1();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	autoback() {
	    let localctx = new AutobackContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, AMOSParser.RULE_autoback);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 495;
	        this.match(AMOSParser.T__46);
	        this.state = 496;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	palette() {
	    let localctx = new PaletteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, AMOSParser.RULE_palette);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 498;
	        this.match(AMOSParser.T__47);
	        this.state = 506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===98) {
	            this.state = 499;
	            this.match(AMOSParser.HECADECIMAL);
	            this.state = 500;
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===90)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===66) {
	                this.state = 501;
	                this.match(AMOSParser.COMMA);
	            }

	            this.state = 508;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	double_buffer() {
	    let localctx = new Double_bufferContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, AMOSParser.RULE_double_buffer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 509;
	        this.match(AMOSParser.T__48);
	        this.state = 510;
	        this.match(AMOSParser.T__49);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pen() {
	    let localctx = new PenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, AMOSParser.RULE_pen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(AMOSParser.T__50);
	        this.state = 513;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cls() {
	    let localctx = new ClsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, AMOSParser.RULE_cls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 515;
	        this.match(AMOSParser.T__51);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paper() {
	    let localctx = new PaperContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, AMOSParser.RULE_paper);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517;
	        this.match(AMOSParser.T__52);
	        this.state = 518;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	degree() {
	    let localctx = new DegreeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, AMOSParser.RULE_degree);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this.match(AMOSParser.T__53);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hide() {
	    let localctx = new HideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, AMOSParser.RULE_hide);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.match(AMOSParser.T__54);
	        this.state = 524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 523;
	            this.match(AMOSParser.T__5);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flash_off() {
	    let localctx = new Flash_offContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, AMOSParser.RULE_flash_off);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526;
	        this.match(AMOSParser.T__55);
	        this.state = 527;
	        this.match(AMOSParser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flash_on() {
	    let localctx = new Flash_onContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, AMOSParser.RULE_flash_on);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 529;
	        this.match(AMOSParser.T__55);
	        this.state = 530;
	        this.match(AMOSParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sin_function() {
	    let localctx = new Sin_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, AMOSParser.RULE_sin_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 532;
	        this.match(AMOSParser.T__56);
	        this.state = 533;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 537;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 534;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 535;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 3:
	            this.state = 536;
	            this.expression1();
	            break;

	        }
	        this.state = 539;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cos_function() {
	    let localctx = new Cos_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, AMOSParser.RULE_cos_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 541;
	        this.match(AMOSParser.T__57);
	        this.state = 542;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 546;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 543;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 544;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 3:
	            this.state = 545;
	            this.expression1();
	            break;

	        }
	        this.state = 548;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	play_sound() {
	    let localctx = new Play_soundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, AMOSParser.RULE_play_sound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        this.match(AMOSParser.PLAY);
	        this.state = 555;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 551;
	            this.match(AMOSParser.HECADECIMAL);
	            this.state = 552;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 553;
	            this.expression1();
	            break;

	        case 3:
	            this.state = 554;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        }
	        this.state = 557;
	        this.match(AMOSParser.COMMA);
	        this.state = 558;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wait_key_break() {
	    let localctx = new Wait_key_breakContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, AMOSParser.RULE_wait_key_break);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 560;
	        this.match(AMOSParser.WAITKEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_starter() {
	    let localctx = new Variable_starterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, AMOSParser.RULE_variable_starter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 562;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 563;
	        this.match(AMOSParser.T__19);
	        this.state = 566;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 32:
	            this.state = 564;
	            this.btst();
	            break;
	        case 57:
	        case 58:
	        case 63:
	        case 90:
	        case 92:
	        case 98:
	            this.state = 565;
	            this.expression1();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_starter() {
	    let localctx = new Function_starterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, AMOSParser.RULE_function_starter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 568;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 569;
	        this.match(AMOSParser.BRACKETOPEN_ARRAY);
	        this.state = 570;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===90)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 571;
	        this.match(AMOSParser.BRACKETCLOSE_ARRAY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call_or_array_access() {
	    let localctx = new Function_call_or_array_accessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, AMOSParser.RULE_function_call_or_array_access);
	    var _la = 0;
	    try {
	        this.state = 591;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 573;
	            this.match(AMOSParser.IDENTIFIER);
	            this.state = 574;
	            this.match(AMOSParser.BRACKETOPEN_ARRAY);
	            this.state = 575;
	            this.expression1();
	            this.state = 576;
	            this.match(AMOSParser.BRACKETCLOSE_ARRAY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 578;
	            this.match(AMOSParser.IDENTIFIER);
	            this.state = 579;
	            this.match(AMOSParser.BRACKETOPEN_PROP);
	            this.state = 581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 67) !== 0) || ((((_la - 90)) & ~0x1f) === 0 && ((1 << (_la - 90)) & 261) !== 0)) {
	                this.state = 580;
	                this.expression1();
	            }

	            this.state = 587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===66) {
	                this.state = 583;
	                this.match(AMOSParser.COMMA);
	                this.state = 584;
	                this.expression1();
	                this.state = 589;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 590;
	            this.match(AMOSParser.BRACKETCLOSE_PROP);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_structure() {
	    let localctx = new Array_structureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, AMOSParser.RULE_array_structure);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 593;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 594;
	        this.match(AMOSParser.BRACKETOPEN_PROP);

	        this.state = 597;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 595;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 596;
	            this.expression1();
	            break;

	        }
	        this.state = 600;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 599;
	            this.match(AMOSParser.COMMA);
	        }

	        this.state = 604;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 602;
	            this.match(AMOSParser.NUMBER);

	        } else if(la_===2) {
	            this.state = 603;
	            this.expression1();

	        }
	        this.state = 606;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_create() {
	    let localctx = new Array_createContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, AMOSParser.RULE_array_create);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608;
	        this.match(AMOSParser.T__58);
	        this.state = 609;
	        this.array_structure();
	        this.state = 616;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 611;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===66) {
	                    this.state = 610;
	                    this.match(AMOSParser.COMMA);
	                }

	                this.state = 613;
	                this.array_structure(); 
	            }
	            this.state = 618;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_update() {
	    let localctx = new Array_updateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, AMOSParser.RULE_array_update);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 619;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 620;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 624;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 621;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 622;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 3:
	            this.state = 623;
	            this.expression1();
	            break;

	        }
	        this.state = 626;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	        this.state = 627;
	        this.match(AMOSParser.T__19);
	        this.state = 628;
	        this.expression1();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screen_open() {
	    let localctx = new Screen_openContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, AMOSParser.RULE_screen_open);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 630;
	        this.match(AMOSParser.SCREENOPEN);
	        this.state = 631;
	        this.match(AMOSParser.NUMBER);
	        this.state = 632;
	        this.match(AMOSParser.COMMA);
	        this.state = 633;
	        this.match(AMOSParser.NUMBER);
	        this.state = 634;
	        this.match(AMOSParser.COMMA);
	        this.state = 635;
	        this.match(AMOSParser.NUMBER);
	        this.state = 636;
	        this.match(AMOSParser.COMMA);
	        this.state = 637;
	        this.match(AMOSParser.NUMBER);
	        this.state = 638;
	        this.match(AMOSParser.COMMA);
	        this.state = 639;
	        _la = this._input.LA(1);
	        if(!(_la===64 || _la===65)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	curs_off() {
	    let localctx = new Curs_offContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, AMOSParser.RULE_curs_off);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.match(AMOSParser.CURSOFF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	curs_on() {
	    let localctx = new Curs_onContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, AMOSParser.RULE_curs_on);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.match(AMOSParser.CURSON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ink() {
	    let localctx = new InkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, AMOSParser.RULE_ink);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.match(AMOSParser.INK);
	        this.state = 646;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	text() {
	    let localctx = new TextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, AMOSParser.RULE_text);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.match(AMOSParser.TEXT);
	        this.state = 649;
	        this.match(AMOSParser.NUMBER);
	        this.state = 650;
	        this.match(AMOSParser.COMMA);
	        this.state = 651;
	        this.match(AMOSParser.NUMBER);
	        this.state = 652;
	        this.match(AMOSParser.COMMA);
	        this.state = 653;
	        this.match(AMOSParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_loop() {
	    let localctx = new Do_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, AMOSParser.RULE_do_loop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this.match(AMOSParser.DO);
	        this.state = 659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356372382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1778092899) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2991279) !== 0) || _la===103) {
	            this.state = 656;
	            this.statement();
	            this.state = 661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 662;
	        this.match(AMOSParser.LOOP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_wend() {
	    let localctx = new While_wendContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, AMOSParser.RULE_while_wend);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 664;
	        this.match(AMOSParser.WHILE);
	        this.state = 665;
	        this.current_Key_State();
	        this.state = 669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356372382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1778092899) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2991279) !== 0) || _la===103) {
	            this.state = 666;
	            this.statement();
	            this.state = 671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 672;
	        this.match(AMOSParser.WEND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_loop() {
	    let localctx = new For_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, AMOSParser.RULE_for_loop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 674;
	        this.match(AMOSParser.FOR);
	        this.state = 675;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 676;
	        this.match(AMOSParser.T__19);
	        this.state = 677;
	        this.match(AMOSParser.NUMBER);
	        this.state = 678;
	        this.match(AMOSParser.TO);
	        this.state = 679;
	        this.match(AMOSParser.NUMBER);
	        this.state = 683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356372382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1778092899) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2991279) !== 0) || _la===103) {
	            this.state = 680;
	            this.statement();
	            this.state = 685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 689;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 686;
	            this.match(AMOSParser.NEXT);
	            this.state = 687;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 2:
	            this.state = 688;
	            this.match(AMOSParser.NEXT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement() {
	    let localctx = new If_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, AMOSParser.RULE_if_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 691;
	        this.match(AMOSParser.IF);
	        this.state = 692;
	        this.expression1();
	        this.state = 693;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 66060288) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 694;
	        this.expression2();
	        this.state = 698;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 695;
	                this.statement(); 
	            }
	            this.state = 700;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
	        }

	        this.state = 705;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	            this.state = 701;
	            this.match(AMOSParser.T__0);
	            this.state = 702;
	            this.match(AMOSParser.T__59);
	            break;
	        case 80:
	            this.state = 703;
	            this.else_statement();
	            break;
	        case 81:
	            this.state = 704;
	            this.match(AMOSParser.ENDIF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	else_statement() {
	    let localctx = new Else_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, AMOSParser.RULE_else_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        this.match(AMOSParser.ELSE);
	        this.state = 711;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356372382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1778092899) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2991279) !== 0) || _la===103) {
	            this.state = 708;
	            this.statement();
	            this.state = 713;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 714;
	        this.match(AMOSParser.ENDIF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement_key_state() {
	    let localctx = new If_statement_key_stateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, AMOSParser.RULE_if_statement_key_state);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 716;
	        this.match(AMOSParser.IF);
	        this.state = 717;
	        this.current_Key_State();
	        this.state = 721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356372382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1778092899) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2991279) !== 0) || _la===103) {
	            this.state = 718;
	            this.statement();
	            this.state = 723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 726;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.state = 724;
	            this.else_statement();
	            break;
	        case 81:
	            this.state = 725;
	            this.match(AMOSParser.ENDIF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bar() {
	    let localctx = new BarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, AMOSParser.RULE_bar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728;
	        this.match(AMOSParser.BAR);
	        this.state = 729;
	        this.expression1();
	        this.state = 730;
	        this.match(AMOSParser.COMMA);
	        this.state = 731;
	        this.expression2();
	        this.state = 732;
	        this.match(AMOSParser.TO);
	        this.state = 733;
	        this.expression1();
	        this.state = 734;
	        this.match(AMOSParser.COMMA);
	        this.state = 735;
	        this.expression2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure() {
	    let localctx = new ProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, AMOSParser.RULE_procedure);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 737;
	        this.match(AMOSParser.PROC);
	        this.state = 738;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 739;
	        this.match(AMOSParser.BRACKETOPEN_ARRAY);
	        this.state = 741;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 740;
	            this.match(AMOSParser.IDENTIFIER);
	        }

	        this.state = 743;
	        this.match(AMOSParser.BRACKETCLOSE_ARRAY);
	        this.state = 747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3356372382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1778092899) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2991279) !== 0) || _la===103) {
	            this.state = 744;
	            this.statement();
	            this.state = 749;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 750;
	        this.match(AMOSParser.ENDPROC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	current_Key_State() {
	    let localctx = new Current_Key_StateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, AMOSParser.RULE_current_Key_State);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this.match(AMOSParser.KEYSTATE);
	        this.state = 753;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 754;
	        this.expression1();
	        this.state = 755;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	print_options() {
	    let localctx = new Print_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, AMOSParser.RULE_print_options);
	    try {
	        this.state = 761;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 57:
	        case 58:
	        case 63:
	        case 90:
	        case 92:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 757;
	            this.expression1();
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 758;
	            this.match(AMOSParser.STRING);
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 759;
	            this.match(AMOSParser.HASHTAG);
	            this.state = 760;
	            this.match(AMOSParser.NUMBER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	print_something() {
	    let localctx = new Print_somethingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, AMOSParser.RULE_print_something);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 763;
	        this.match(AMOSParser.T__60);
	        this.state = 764;
	        this.print_options();
	        this.state = 769;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 765;
	                _la = this._input.LA(1);
	                if(!(_la===66 || _la===104)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 766;
	                this.print_options(); 
	            }
	            this.state = 771;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

AMOSParser.EOF = antlr4.Token.EOF;
AMOSParser.T__0 = 1;
AMOSParser.T__1 = 2;
AMOSParser.T__2 = 3;
AMOSParser.T__3 = 4;
AMOSParser.T__4 = 5;
AMOSParser.T__5 = 6;
AMOSParser.T__6 = 7;
AMOSParser.T__7 = 8;
AMOSParser.T__8 = 9;
AMOSParser.T__9 = 10;
AMOSParser.T__10 = 11;
AMOSParser.T__11 = 12;
AMOSParser.T__12 = 13;
AMOSParser.T__13 = 14;
AMOSParser.T__14 = 15;
AMOSParser.T__15 = 16;
AMOSParser.T__16 = 17;
AMOSParser.T__17 = 18;
AMOSParser.T__18 = 19;
AMOSParser.T__19 = 20;
AMOSParser.T__20 = 21;
AMOSParser.T__21 = 22;
AMOSParser.T__22 = 23;
AMOSParser.T__23 = 24;
AMOSParser.T__24 = 25;
AMOSParser.T__25 = 26;
AMOSParser.T__26 = 27;
AMOSParser.T__27 = 28;
AMOSParser.T__28 = 29;
AMOSParser.T__29 = 30;
AMOSParser.T__30 = 31;
AMOSParser.T__31 = 32;
AMOSParser.T__32 = 33;
AMOSParser.T__33 = 34;
AMOSParser.T__34 = 35;
AMOSParser.T__35 = 36;
AMOSParser.T__36 = 37;
AMOSParser.T__37 = 38;
AMOSParser.T__38 = 39;
AMOSParser.T__39 = 40;
AMOSParser.T__40 = 41;
AMOSParser.T__41 = 42;
AMOSParser.T__42 = 43;
AMOSParser.T__43 = 44;
AMOSParser.T__44 = 45;
AMOSParser.T__45 = 46;
AMOSParser.T__46 = 47;
AMOSParser.T__47 = 48;
AMOSParser.T__48 = 49;
AMOSParser.T__49 = 50;
AMOSParser.T__50 = 51;
AMOSParser.T__51 = 52;
AMOSParser.T__52 = 53;
AMOSParser.T__53 = 54;
AMOSParser.T__54 = 55;
AMOSParser.T__55 = 56;
AMOSParser.T__56 = 57;
AMOSParser.T__57 = 58;
AMOSParser.T__58 = 59;
AMOSParser.T__59 = 60;
AMOSParser.T__60 = 61;
AMOSParser.SCREENOPEN = 62;
AMOSParser.NUMBER = 63;
AMOSParser.LOWRES = 64;
AMOSParser.HIRES = 65;
AMOSParser.COMMA = 66;
AMOSParser.COMMENT = 67;
AMOSParser.WS = 68;
AMOSParser.CURSOFF = 69;
AMOSParser.CURSON = 70;
AMOSParser.INK = 71;
AMOSParser.TEXT = 72;
AMOSParser.STRING = 73;
AMOSParser.DO = 74;
AMOSParser.LOOP = 75;
AMOSParser.FOR = 76;
AMOSParser.TO = 77;
AMOSParser.NEXT = 78;
AMOSParser.IF = 79;
AMOSParser.ELSE = 80;
AMOSParser.ENDIF = 81;
AMOSParser.WHILE = 82;
AMOSParser.WEND = 83;
AMOSParser.PLAY = 84;
AMOSParser.PROC = 85;
AMOSParser.ENDPROC = 86;
AMOSParser.BAR = 87;
AMOSParser.WAITKEY = 88;
AMOSParser.KEYSTATE = 89;
AMOSParser.IDENTIFIER = 90;
AMOSParser.COMPARISON = 91;
AMOSParser.BRACKETOPEN_PROP = 92;
AMOSParser.BRACKETCLOSE_PROP = 93;
AMOSParser.BRACKETOPEN_ARRAY = 94;
AMOSParser.BRACKETCLOSE_ARRAY = 95;
AMOSParser.BRACKETOPEN_FUNCTION = 96;
AMOSParser.BRACKETCLOSE_FUNCTION = 97;
AMOSParser.HECADECIMAL = 98;
AMOSParser.MULTIPLY = 99;
AMOSParser.DIVIDE = 100;
AMOSParser.ADD = 101;
AMOSParser.SUBTRACT = 102;
AMOSParser.STATEMENT_SEPARATOR = 103;
AMOSParser.FINISH_AND_ADD_OTHER_STATEMENT = 104;
AMOSParser.DOT = 105;
AMOSParser.HASHTAG = 106;
AMOSParser.PERCENT = 107;
AMOSParser.QUESTION = 108;

AMOSParser.RULE_expression2 = 0;
AMOSParser.RULE_expression1 = 1;
AMOSParser.RULE_term = 2;
AMOSParser.RULE_array_index_get = 3;
AMOSParser.RULE_factor = 4;
AMOSParser.RULE_program = 5;
AMOSParser.RULE_statement = 6;
AMOSParser.RULE_goto_label = 7;
AMOSParser.RULE_gosub = 8;
AMOSParser.RULE_bob_update_on = 9;
AMOSParser.RULE_clear_key = 10;
AMOSParser.RULE_bob_off = 11;
AMOSParser.RULE_set_rainbow = 12;
AMOSParser.RULE_use_rainbow = 13;
AMOSParser.RULE_label_title = 14;
AMOSParser.RULE_key_speed = 15;
AMOSParser.RULE_sam_loop = 16;
AMOSParser.RULE_sam_bank = 17;
AMOSParser.RULE_led_off = 18;
AMOSParser.RULE_loadBank = 19;
AMOSParser.RULE_loadBankImgToSprite = 20;
AMOSParser.RULE_if_then = 21;
AMOSParser.RULE_open_out_readfile = 22;
AMOSParser.RULE_open_in_writefile = 23;
AMOSParser.RULE_close_file = 24;
AMOSParser.RULE_input_variable = 25;
AMOSParser.RULE_btst = 26;
AMOSParser.RULE_repeat_key = 27;
AMOSParser.RULE_set_buffer = 28;
AMOSParser.RULE_global = 29;
AMOSParser.RULE_turbo_draw = 30;
AMOSParser.RULE_locate = 31;
AMOSParser.RULE_add = 32;
AMOSParser.RULE_blitter_copy = 33;
AMOSParser.RULE_blitter_fill = 34;
AMOSParser.RULE_blitter_clear = 35;
AMOSParser.RULE_autoback = 36;
AMOSParser.RULE_palette = 37;
AMOSParser.RULE_double_buffer = 38;
AMOSParser.RULE_pen = 39;
AMOSParser.RULE_cls = 40;
AMOSParser.RULE_paper = 41;
AMOSParser.RULE_degree = 42;
AMOSParser.RULE_hide = 43;
AMOSParser.RULE_flash_off = 44;
AMOSParser.RULE_flash_on = 45;
AMOSParser.RULE_sin_function = 46;
AMOSParser.RULE_cos_function = 47;
AMOSParser.RULE_play_sound = 48;
AMOSParser.RULE_wait_key_break = 49;
AMOSParser.RULE_variable_starter = 50;
AMOSParser.RULE_function_starter = 51;
AMOSParser.RULE_function_call_or_array_access = 52;
AMOSParser.RULE_array_structure = 53;
AMOSParser.RULE_array_create = 54;
AMOSParser.RULE_array_update = 55;
AMOSParser.RULE_screen_open = 56;
AMOSParser.RULE_curs_off = 57;
AMOSParser.RULE_curs_on = 58;
AMOSParser.RULE_ink = 59;
AMOSParser.RULE_text = 60;
AMOSParser.RULE_do_loop = 61;
AMOSParser.RULE_while_wend = 62;
AMOSParser.RULE_for_loop = 63;
AMOSParser.RULE_if_statement = 64;
AMOSParser.RULE_else_statement = 65;
AMOSParser.RULE_if_statement_key_state = 66;
AMOSParser.RULE_bar = 67;
AMOSParser.RULE_procedure = 68;
AMOSParser.RULE_current_Key_State = 69;
AMOSParser.RULE_print_options = 70;
AMOSParser.RULE_print_something = 71;

class Expression2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_expression2;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.ADD);
	    } else {
	        return this.getToken(AMOSParser.ADD, i);
	    }
	};


	SUBTRACT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.SUBTRACT);
	    } else {
	        return this.getToken(AMOSParser.SUBTRACT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterExpression2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitExpression2(this);
		}
	}


}



class Expression1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_expression1;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.ADD);
	    } else {
	        return this.getToken(AMOSParser.ADD, i);
	    }
	};


	SUBTRACT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.SUBTRACT);
	    } else {
	        return this.getToken(AMOSParser.SUBTRACT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterExpression1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitExpression1(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_term;
    }

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	MULTIPLY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.MULTIPLY);
	    } else {
	        return this.getToken(AMOSParser.MULTIPLY, i);
	    }
	};


	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.DIVIDE);
	    } else {
	        return this.getToken(AMOSParser.DIVIDE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitTerm(this);
		}
	}


}



class Array_index_getContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_array_index_get;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterArray_index_get(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitArray_index_get(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_factor;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	array_index_get() {
	    return this.getTypedRuleContext(Array_index_getContext,0);
	};

	sin_function() {
	    return this.getTypedRuleContext(Sin_functionContext,0);
	};

	cos_function() {
	    return this.getTypedRuleContext(Cos_functionContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	HECADECIMAL() {
	    return this.getToken(AMOSParser.HECADECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFactor(this);
		}
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_program;
    }

	EOF() {
	    return this.getToken(AMOSParser.EOF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitProgram(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_statement;
    }

	procedure() {
	    return this.getTypedRuleContext(ProcedureContext,0);
	};

	screen_open() {
	    return this.getTypedRuleContext(Screen_openContext,0);
	};

	curs_off() {
	    return this.getTypedRuleContext(Curs_offContext,0);
	};

	array_update() {
	    return this.getTypedRuleContext(Array_updateContext,0);
	};

	curs_on() {
	    return this.getTypedRuleContext(Curs_onContext,0);
	};

	ink() {
	    return this.getTypedRuleContext(InkContext,0);
	};

	text() {
	    return this.getTypedRuleContext(TextContext,0);
	};

	do_loop() {
	    return this.getTypedRuleContext(Do_loopContext,0);
	};

	for_loop() {
	    return this.getTypedRuleContext(For_loopContext,0);
	};

	if_then() {
	    return this.getTypedRuleContext(If_thenContext,0);
	};

	if_statement_key_state() {
	    return this.getTypedRuleContext(If_statement_key_stateContext,0);
	};

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	function_starter() {
	    return this.getTypedRuleContext(Function_starterContext,0);
	};

	bar() {
	    return this.getTypedRuleContext(BarContext,0);
	};

	function_call_or_array_access() {
	    return this.getTypedRuleContext(Function_call_or_array_accessContext,0);
	};

	variable_starter() {
	    return this.getTypedRuleContext(Variable_starterContext,0);
	};

	while_wend() {
	    return this.getTypedRuleContext(While_wendContext,0);
	};

	wait_key_break() {
	    return this.getTypedRuleContext(Wait_key_breakContext,0);
	};

	play_sound() {
	    return this.getTypedRuleContext(Play_soundContext,0);
	};

	STATEMENT_SEPARATOR() {
	    return this.getToken(AMOSParser.STATEMENT_SEPARATOR, 0);
	};

	array_create() {
	    return this.getTypedRuleContext(Array_createContext,0);
	};

	print_something() {
	    return this.getTypedRuleContext(Print_somethingContext,0);
	};

	flash_off() {
	    return this.getTypedRuleContext(Flash_offContext,0);
	};

	flash_on() {
	    return this.getTypedRuleContext(Flash_onContext,0);
	};

	hide() {
	    return this.getTypedRuleContext(HideContext,0);
	};

	degree() {
	    return this.getTypedRuleContext(DegreeContext,0);
	};

	paper() {
	    return this.getTypedRuleContext(PaperContext,0);
	};

	cls() {
	    return this.getTypedRuleContext(ClsContext,0);
	};

	palette() {
	    return this.getTypedRuleContext(PaletteContext,0);
	};

	pen() {
	    return this.getTypedRuleContext(PenContext,0);
	};

	double_buffer() {
	    return this.getTypedRuleContext(Double_bufferContext,0);
	};

	autoback() {
	    return this.getTypedRuleContext(AutobackContext,0);
	};

	blitter_copy() {
	    return this.getTypedRuleContext(Blitter_copyContext,0);
	};

	blitter_fill() {
	    return this.getTypedRuleContext(Blitter_fillContext,0);
	};

	blitter_clear() {
	    return this.getTypedRuleContext(Blitter_clearContext,0);
	};

	add() {
	    return this.getTypedRuleContext(AddContext,0);
	};

	locate() {
	    return this.getTypedRuleContext(LocateContext,0);
	};

	turbo_draw() {
	    return this.getTypedRuleContext(Turbo_drawContext,0);
	};

	global() {
	    return this.getTypedRuleContext(GlobalContext,0);
	};

	set_buffer() {
	    return this.getTypedRuleContext(Set_bufferContext,0);
	};

	repeat_key() {
	    return this.getTypedRuleContext(Repeat_keyContext,0);
	};

	btst() {
	    return this.getTypedRuleContext(BtstContext,0);
	};

	open_out_readfile() {
	    return this.getTypedRuleContext(Open_out_readfileContext,0);
	};

	close_file() {
	    return this.getTypedRuleContext(Close_fileContext,0);
	};

	open_in_writefile() {
	    return this.getTypedRuleContext(Open_in_writefileContext,0);
	};

	input_variable() {
	    return this.getTypedRuleContext(Input_variableContext,0);
	};

	loadBank() {
	    return this.getTypedRuleContext(LoadBankContext,0);
	};

	loadBankImgToSprite() {
	    return this.getTypedRuleContext(LoadBankImgToSpriteContext,0);
	};

	led_off() {
	    return this.getTypedRuleContext(Led_offContext,0);
	};

	sam_bank() {
	    return this.getTypedRuleContext(Sam_bankContext,0);
	};

	sam_loop() {
	    return this.getTypedRuleContext(Sam_loopContext,0);
	};

	key_speed() {
	    return this.getTypedRuleContext(Key_speedContext,0);
	};

	label_title() {
	    return this.getTypedRuleContext(Label_titleContext,0);
	};

	set_rainbow() {
	    return this.getTypedRuleContext(Set_rainbowContext,0);
	};

	use_rainbow() {
	    return this.getTypedRuleContext(Use_rainbowContext,0);
	};

	bob_off() {
	    return this.getTypedRuleContext(Bob_offContext,0);
	};

	clear_key() {
	    return this.getTypedRuleContext(Clear_keyContext,0);
	};

	bob_update_on() {
	    return this.getTypedRuleContext(Bob_update_onContext,0);
	};

	gosub() {
	    return this.getTypedRuleContext(GosubContext,0);
	};

	goto_label() {
	    return this.getTypedRuleContext(Goto_labelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitStatement(this);
		}
	}


}



class Goto_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_goto_label;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterGoto_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitGoto_label(this);
		}
	}


}



class GosubContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_gosub;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterGosub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitGosub(this);
		}
	}


}



class Bob_update_onContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_bob_update_on;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBob_update_on(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBob_update_on(this);
		}
	}


}



class Clear_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_clear_key;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterClear_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitClear_key(this);
		}
	}


}



class Bob_offContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_bob_off;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBob_off(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBob_off(this);
		}
	}


}



class Set_rainbowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_set_rainbow;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.STRING);
	    } else {
	        return this.getToken(AMOSParser.STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSet_rainbow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSet_rainbow(this);
		}
	}


}



class Use_rainbowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_use_rainbow;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.STRING);
	    } else {
	        return this.getToken(AMOSParser.STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterUse_rainbow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitUse_rainbow(this);
		}
	}


}



class Label_titleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_label_title;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	STATEMENT_SEPARATOR() {
	    return this.getToken(AMOSParser.STATEMENT_SEPARATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLabel_title(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLabel_title(this);
		}
	}


}



class Key_speedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_key_speed;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterKey_speed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitKey_speed(this);
		}
	}


}



class Sam_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_sam_loop;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSam_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSam_loop(this);
		}
	}


}



class Sam_bankContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_sam_bank;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSam_bank(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSam_bank(this);
		}
	}


}



class Led_offContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_led_off;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLed_off(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLed_off(this);
		}
	}


}



class LoadBankContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_loadBank;
    }

	STRING() {
	    return this.getToken(AMOSParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLoadBank(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLoadBank(this);
		}
	}


}



class LoadBankImgToSpriteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_loadBankImgToSprite;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLoadBankImgToSprite(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLoadBankImgToSprite(this);
		}
	}


}



class If_thenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_if_then;
    }

	IF() {
	    return this.getToken(AMOSParser.IF, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	expression2() {
	    return this.getTypedRuleContext(Expression2Context,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterIf_then(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitIf_then(this);
		}
	}


}



class Open_out_readfileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_open_out_readfile;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterOpen_out_readfile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitOpen_out_readfile(this);
		}
	}


}



class Open_in_writefileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_open_in_writefile;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterOpen_in_writefile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitOpen_in_writefile(this);
		}
	}


}



class Close_fileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_close_file;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterClose_file(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitClose_file(this);
		}
	}


}



class Input_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_input_variable;
    }

	HASHTAG() {
	    return this.getToken(AMOSParser.HASHTAG, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	HECADECIMAL() {
	    return this.getToken(AMOSParser.HECADECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterInput_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitInput_variable(this);
		}
	}


}



class BtstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_btst;
    }

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBtst(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBtst(this);
		}
	}


}



class Repeat_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_repeat_key;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterRepeat_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitRepeat_key(this);
		}
	}


}



class Set_bufferContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_set_buffer;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSet_buffer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSet_buffer(this);
		}
	}


}



class GlobalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_global;
    }

	array_structure = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_structureContext);
	    } else {
	        return this.getTypedRuleContext(Array_structureContext,i);
	    }
	};

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterGlobal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitGlobal(this);
		}
	}


}



class Turbo_drawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_turbo_draw;
    }

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterTurbo_draw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitTurbo_draw(this);
		}
	}


}



class LocateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_locate;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLocate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLocate(this);
		}
	}


}



class AddContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_add;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterAdd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitAdd(this);
		}
	}


}



class Blitter_copyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_blitter_copy;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBlitter_copy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBlitter_copy(this);
		}
	}


}



class Blitter_fillContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_blitter_fill;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBlitter_fill(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBlitter_fill(this);
		}
	}


}



class Blitter_clearContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_blitter_clear;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBlitter_clear(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBlitter_clear(this);
		}
	}


}



class AutobackContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_autoback;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterAutoback(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitAutoback(this);
		}
	}


}



class PaletteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_palette;
    }

	HECADECIMAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.HECADECIMAL);
	    } else {
	        return this.getToken(AMOSParser.HECADECIMAL, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPalette(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPalette(this);
		}
	}


}



class Double_bufferContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_double_buffer;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterDouble_buffer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitDouble_buffer(this);
		}
	}


}



class PenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_pen;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPen(this);
		}
	}


}



class ClsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_cls;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCls(this);
		}
	}


}



class PaperContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_paper;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPaper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPaper(this);
		}
	}


}



class DegreeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_degree;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterDegree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitDegree(this);
		}
	}


}



class HideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_hide;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterHide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitHide(this);
		}
	}


}



class Flash_offContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_flash_off;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFlash_off(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFlash_off(this);
		}
	}


}



class Flash_onContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_flash_on;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFlash_on(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFlash_on(this);
		}
	}


}



class Sin_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_sin_function;
    }

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSin_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSin_function(this);
		}
	}


}



class Cos_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_cos_function;
    }

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCos_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCos_function(this);
		}
	}


}



class Play_soundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_play_sound;
    }

	PLAY() {
	    return this.getToken(AMOSParser.PLAY, 0);
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	HECADECIMAL() {
	    return this.getToken(AMOSParser.HECADECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPlay_sound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPlay_sound(this);
		}
	}


}



class Wait_key_breakContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_wait_key_break;
    }

	WAITKEY() {
	    return this.getToken(AMOSParser.WAITKEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterWait_key_break(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitWait_key_break(this);
		}
	}


}



class Variable_starterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_variable_starter;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	btst() {
	    return this.getTypedRuleContext(BtstContext,0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterVariable_starter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitVariable_starter(this);
		}
	}


}



class Function_starterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_function_starter;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	BRACKETOPEN_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETOPEN_ARRAY, 0);
	};

	BRACKETCLOSE_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_ARRAY, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFunction_starter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFunction_starter(this);
		}
	}


}



class Function_call_or_array_accessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_function_call_or_array_access;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	BRACKETOPEN_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETOPEN_ARRAY, 0);
	};

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	BRACKETCLOSE_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_ARRAY, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFunction_call_or_array_access(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFunction_call_or_array_access(this);
		}
	}


}



class Array_structureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_array_structure;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterArray_structure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitArray_structure(this);
		}
	}


}



class Array_createContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_array_create;
    }

	array_structure = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_structureContext);
	    } else {
	        return this.getTypedRuleContext(Array_structureContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterArray_create(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitArray_create(this);
		}
	}


}



class Array_updateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_array_update;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterArray_update(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitArray_update(this);
		}
	}


}



class Screen_openContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_screen_open;
    }

	SCREENOPEN() {
	    return this.getToken(AMOSParser.SCREENOPEN, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	LOWRES() {
	    return this.getToken(AMOSParser.LOWRES, 0);
	};

	HIRES() {
	    return this.getToken(AMOSParser.HIRES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterScreen_open(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitScreen_open(this);
		}
	}


}



class Curs_offContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_curs_off;
    }

	CURSOFF() {
	    return this.getToken(AMOSParser.CURSOFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCurs_off(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCurs_off(this);
		}
	}


}



class Curs_onContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_curs_on;
    }

	CURSON() {
	    return this.getToken(AMOSParser.CURSON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCurs_on(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCurs_on(this);
		}
	}


}



class InkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_ink;
    }

	INK() {
	    return this.getToken(AMOSParser.INK, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterInk(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitInk(this);
		}
	}


}



class TextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_text;
    }

	TEXT() {
	    return this.getToken(AMOSParser.TEXT, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	STRING() {
	    return this.getToken(AMOSParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitText(this);
		}
	}


}



class Do_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_do_loop;
    }

	DO() {
	    return this.getToken(AMOSParser.DO, 0);
	};

	LOOP() {
	    return this.getToken(AMOSParser.LOOP, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterDo_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitDo_loop(this);
		}
	}


}



class While_wendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_while_wend;
    }

	WHILE() {
	    return this.getToken(AMOSParser.WHILE, 0);
	};

	current_Key_State() {
	    return this.getTypedRuleContext(Current_Key_StateContext,0);
	};

	WEND() {
	    return this.getToken(AMOSParser.WEND, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterWhile_wend(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitWhile_wend(this);
		}
	}


}



class For_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_for_loop;
    }

	FOR() {
	    return this.getToken(AMOSParser.FOR, 0);
	};

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	NEXT() {
	    return this.getToken(AMOSParser.NEXT, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFor_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFor_loop(this);
		}
	}


}



class If_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_if_statement;
    }

	IF() {
	    return this.getToken(AMOSParser.IF, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	expression2() {
	    return this.getTypedRuleContext(Expression2Context,0);
	};

	else_statement() {
	    return this.getTypedRuleContext(Else_statementContext,0);
	};

	ENDIF() {
	    return this.getToken(AMOSParser.ENDIF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterIf_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitIf_statement(this);
		}
	}


}



class Else_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_else_statement;
    }

	ELSE() {
	    return this.getToken(AMOSParser.ELSE, 0);
	};

	ENDIF() {
	    return this.getToken(AMOSParser.ENDIF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterElse_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitElse_statement(this);
		}
	}


}



class If_statement_key_stateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_if_statement_key_state;
    }

	IF() {
	    return this.getToken(AMOSParser.IF, 0);
	};

	current_Key_State() {
	    return this.getTypedRuleContext(Current_Key_StateContext,0);
	};

	else_statement() {
	    return this.getTypedRuleContext(Else_statementContext,0);
	};

	ENDIF() {
	    return this.getToken(AMOSParser.ENDIF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterIf_statement_key_state(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitIf_statement_key_state(this);
		}
	}


}



class BarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_bar;
    }

	BAR() {
	    return this.getToken(AMOSParser.BAR, 0);
	};

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression2Context);
	    } else {
	        return this.getTypedRuleContext(Expression2Context,i);
	    }
	};

	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBar(this);
		}
	}


}



class ProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_procedure;
    }

	PROC() {
	    return this.getToken(AMOSParser.PROC, 0);
	};

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	BRACKETOPEN_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETOPEN_ARRAY, 0);
	};

	BRACKETCLOSE_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_ARRAY, 0);
	};

	ENDPROC() {
	    return this.getToken(AMOSParser.ENDPROC, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitProcedure(this);
		}
	}


}



class Current_Key_StateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_current_Key_State;
    }

	KEYSTATE() {
	    return this.getToken(AMOSParser.KEYSTATE, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCurrent_Key_State(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCurrent_Key_State(this);
		}
	}


}



class Print_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_print_options;
    }

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	STRING() {
	    return this.getToken(AMOSParser.STRING, 0);
	};

	HASHTAG() {
	    return this.getToken(AMOSParser.HASHTAG, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPrint_options(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPrint_options(this);
		}
	}


}



class Print_somethingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_print_something;
    }

	print_options = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Print_optionsContext);
	    } else {
	        return this.getTypedRuleContext(Print_optionsContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	FINISH_AND_ADD_OTHER_STATEMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.FINISH_AND_ADD_OTHER_STATEMENT);
	    } else {
	        return this.getToken(AMOSParser.FINISH_AND_ADD_OTHER_STATEMENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPrint_something(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPrint_something(this);
		}
	}


}




AMOSParser.Expression2Context = Expression2Context; 
AMOSParser.Expression1Context = Expression1Context; 
AMOSParser.TermContext = TermContext; 
AMOSParser.Array_index_getContext = Array_index_getContext; 
AMOSParser.FactorContext = FactorContext; 
AMOSParser.ProgramContext = ProgramContext; 
AMOSParser.StatementContext = StatementContext; 
AMOSParser.Goto_labelContext = Goto_labelContext; 
AMOSParser.GosubContext = GosubContext; 
AMOSParser.Bob_update_onContext = Bob_update_onContext; 
AMOSParser.Clear_keyContext = Clear_keyContext; 
AMOSParser.Bob_offContext = Bob_offContext; 
AMOSParser.Set_rainbowContext = Set_rainbowContext; 
AMOSParser.Use_rainbowContext = Use_rainbowContext; 
AMOSParser.Label_titleContext = Label_titleContext; 
AMOSParser.Key_speedContext = Key_speedContext; 
AMOSParser.Sam_loopContext = Sam_loopContext; 
AMOSParser.Sam_bankContext = Sam_bankContext; 
AMOSParser.Led_offContext = Led_offContext; 
AMOSParser.LoadBankContext = LoadBankContext; 
AMOSParser.LoadBankImgToSpriteContext = LoadBankImgToSpriteContext; 
AMOSParser.If_thenContext = If_thenContext; 
AMOSParser.Open_out_readfileContext = Open_out_readfileContext; 
AMOSParser.Open_in_writefileContext = Open_in_writefileContext; 
AMOSParser.Close_fileContext = Close_fileContext; 
AMOSParser.Input_variableContext = Input_variableContext; 
AMOSParser.BtstContext = BtstContext; 
AMOSParser.Repeat_keyContext = Repeat_keyContext; 
AMOSParser.Set_bufferContext = Set_bufferContext; 
AMOSParser.GlobalContext = GlobalContext; 
AMOSParser.Turbo_drawContext = Turbo_drawContext; 
AMOSParser.LocateContext = LocateContext; 
AMOSParser.AddContext = AddContext; 
AMOSParser.Blitter_copyContext = Blitter_copyContext; 
AMOSParser.Blitter_fillContext = Blitter_fillContext; 
AMOSParser.Blitter_clearContext = Blitter_clearContext; 
AMOSParser.AutobackContext = AutobackContext; 
AMOSParser.PaletteContext = PaletteContext; 
AMOSParser.Double_bufferContext = Double_bufferContext; 
AMOSParser.PenContext = PenContext; 
AMOSParser.ClsContext = ClsContext; 
AMOSParser.PaperContext = PaperContext; 
AMOSParser.DegreeContext = DegreeContext; 
AMOSParser.HideContext = HideContext; 
AMOSParser.Flash_offContext = Flash_offContext; 
AMOSParser.Flash_onContext = Flash_onContext; 
AMOSParser.Sin_functionContext = Sin_functionContext; 
AMOSParser.Cos_functionContext = Cos_functionContext; 
AMOSParser.Play_soundContext = Play_soundContext; 
AMOSParser.Wait_key_breakContext = Wait_key_breakContext; 
AMOSParser.Variable_starterContext = Variable_starterContext; 
AMOSParser.Function_starterContext = Function_starterContext; 
AMOSParser.Function_call_or_array_accessContext = Function_call_or_array_accessContext; 
AMOSParser.Array_structureContext = Array_structureContext; 
AMOSParser.Array_createContext = Array_createContext; 
AMOSParser.Array_updateContext = Array_updateContext; 
AMOSParser.Screen_openContext = Screen_openContext; 
AMOSParser.Curs_offContext = Curs_offContext; 
AMOSParser.Curs_onContext = Curs_onContext; 
AMOSParser.InkContext = InkContext; 
AMOSParser.TextContext = TextContext; 
AMOSParser.Do_loopContext = Do_loopContext; 
AMOSParser.While_wendContext = While_wendContext; 
AMOSParser.For_loopContext = For_loopContext; 
AMOSParser.If_statementContext = If_statementContext; 
AMOSParser.Else_statementContext = Else_statementContext; 
AMOSParser.If_statement_key_stateContext = If_statement_key_stateContext; 
AMOSParser.BarContext = BarContext; 
AMOSParser.ProcedureContext = ProcedureContext; 
AMOSParser.Current_Key_StateContext = Current_Key_StateContext; 
AMOSParser.Print_optionsContext = Print_optionsContext; 
AMOSParser.Print_somethingContext = Print_somethingContext; 
