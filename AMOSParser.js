// Generated from AMOS.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import AMOSListener from './AMOSListener.js';
const serializedATN = [4,1,120,967,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,1,0,1,0,1,0,5,0,178,8,0,10,0,12,0,181,9,0,1,1,1,1,1,1,5,1,
186,8,1,10,1,12,1,189,9,1,1,1,3,1,192,8,1,1,2,3,2,195,8,2,1,2,1,2,1,2,5,
2,200,8,2,10,2,12,2,203,9,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,3,4,221,8,4,1,5,5,5,224,8,5,10,5,12,5,227,9,5,1,5,1,
5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,
6,302,8,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,340,8,13,1,13,1,13,1,13,1,13,1,13,
5,13,347,8,13,10,13,12,13,350,9,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,367,8,16,10,16,12,16,370,9,16,
1,17,1,17,1,17,1,17,5,17,376,8,17,10,17,12,17,379,9,17,1,18,1,18,3,18,383,
8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
23,1,23,1,23,1,24,1,24,3,24,403,8,24,1,25,1,25,1,25,1,25,1,25,3,25,410,8,
25,1,25,1,25,1,25,1,25,3,25,416,8,25,1,25,1,25,1,25,1,25,3,25,422,8,25,1,
25,1,25,1,25,1,25,3,25,428,8,25,1,25,1,25,1,25,1,25,3,25,434,8,25,1,25,3,
25,437,8,25,1,25,1,25,1,25,3,25,442,8,25,1,26,1,26,1,26,1,26,3,26,448,8,
26,1,26,1,26,1,26,1,26,3,26,454,8,26,1,26,1,26,1,26,1,26,3,26,460,8,26,1,
26,1,26,1,26,1,26,3,26,466,8,26,1,26,3,26,469,8,26,1,26,1,26,1,26,3,26,474,
8,26,1,26,3,26,477,8,26,1,26,1,26,1,26,3,26,482,8,26,1,27,1,27,1,27,1,28,
1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,
31,1,31,1,32,1,32,1,32,1,32,3,32,508,8,32,1,33,1,33,1,33,1,33,1,33,1,33,
1,33,1,33,1,33,3,33,519,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,3,36,528,
8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,536,8,36,1,36,1,36,1,36,1,37,1,37,
1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,
40,1,40,1,40,1,40,1,40,3,40,562,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
1,42,1,42,5,42,573,8,42,10,42,12,42,576,9,42,1,42,1,42,1,42,1,42,1,42,1,
42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,3,44,591,8,44,1,44,1,44,1,44,3,44,
596,8,44,5,44,598,8,44,10,44,12,44,601,9,44,1,45,1,45,1,45,1,45,1,45,1,45,
1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,620,8,46,1,46,
3,46,623,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,634,8,47,
1,48,1,48,1,48,3,48,639,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,
1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,663,
8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
50,3,50,679,8,50,1,51,1,51,1,51,1,52,1,52,1,52,3,52,687,8,52,5,52,689,8,
52,10,52,12,52,692,9,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,
1,56,1,57,1,57,1,58,1,58,3,58,709,8,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,
1,61,1,61,1,61,1,61,3,61,722,8,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,3,62,
731,8,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,3,63,740,8,63,1,63,1,63,1,63,
1,64,1,64,1,65,1,65,1,65,1,65,1,65,3,65,752,8,65,1,66,1,66,1,66,1,66,1,66,
1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,767,8,67,1,67,1,67,5,67,771,
8,67,10,67,12,67,774,9,67,1,67,1,67,1,67,1,67,3,67,780,8,67,1,68,1,68,1,
68,1,68,3,68,786,8,68,1,68,3,68,789,8,68,1,68,1,68,3,68,793,8,68,1,68,1,
68,1,69,1,69,1,69,3,69,800,8,69,1,69,5,69,803,8,69,10,69,12,69,806,9,69,
1,70,1,70,1,70,1,70,1,70,3,70,813,8,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,
1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,
74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,5,76,846,8,76,10,76,12,76,
849,9,76,1,76,1,76,1,77,1,77,1,77,5,77,856,8,77,10,77,12,77,859,9,77,1,77,
1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,870,8,78,10,78,12,78,873,9,
78,1,78,1,78,1,78,3,78,878,8,78,1,79,1,79,1,79,1,79,3,79,884,8,79,1,79,1,
79,1,79,5,79,889,8,79,10,79,12,79,892,9,79,1,79,1,79,1,79,1,79,3,79,898,
8,79,1,80,1,80,5,80,902,8,80,10,80,12,80,905,9,80,1,80,1,80,1,81,1,81,1,
81,5,81,912,8,81,10,81,12,81,915,9,81,1,81,1,81,3,81,919,8,81,1,82,1,82,
1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,3,83,934,8,83,1,83,
3,83,937,8,83,1,83,5,83,940,8,83,10,83,12,83,943,9,83,1,83,1,83,1,84,1,84,
1,84,1,84,1,84,1,85,1,85,1,85,1,85,3,85,956,8,85,1,86,1,86,1,86,1,86,5,86,
962,8,86,10,86,12,86,965,9,86,1,86,2,599,963,0,87,0,2,4,6,8,10,12,14,16,
18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,0,8,1,0,113,114,1,0,
111,112,2,0,75,75,102,102,1,0,30,35,1,0,36,37,1,0,76,77,2,0,85,85,102,102,
2,0,78,78,116,116,1055,0,174,1,0,0,0,2,182,1,0,0,0,4,194,1,0,0,0,6,204,1,
0,0,0,8,220,1,0,0,0,10,225,1,0,0,0,12,301,1,0,0,0,14,303,1,0,0,0,16,308,
1,0,0,0,18,311,1,0,0,0,20,314,1,0,0,0,22,317,1,0,0,0,24,326,1,0,0,0,26,333,
1,0,0,0,28,351,1,0,0,0,30,359,1,0,0,0,32,362,1,0,0,0,34,371,1,0,0,0,36,382,
1,0,0,0,38,384,1,0,0,0,40,387,1,0,0,0,42,390,1,0,0,0,44,394,1,0,0,0,46,397,
1,0,0,0,48,402,1,0,0,0,50,404,1,0,0,0,52,443,1,0,0,0,54,483,1,0,0,0,56,486,
1,0,0,0,58,492,1,0,0,0,60,496,1,0,0,0,62,500,1,0,0,0,64,503,1,0,0,0,66,509,
1,0,0,0,68,520,1,0,0,0,70,522,1,0,0,0,72,524,1,0,0,0,74,540,1,0,0,0,76,546,
1,0,0,0,78,552,1,0,0,0,80,555,1,0,0,0,82,563,1,0,0,0,84,570,1,0,0,0,86,583,
1,0,0,0,88,587,1,0,0,0,90,602,1,0,0,0,92,616,1,0,0,0,94,624,1,0,0,0,96,635,
1,0,0,0,98,648,1,0,0,0,100,664,1,0,0,0,102,680,1,0,0,0,104,683,1,0,0,0,106,
693,1,0,0,0,108,696,1,0,0,0,110,699,1,0,0,0,112,701,1,0,0,0,114,704,1,0,
0,0,116,706,1,0,0,0,118,710,1,0,0,0,120,713,1,0,0,0,122,716,1,0,0,0,124,
725,1,0,0,0,126,734,1,0,0,0,128,744,1,0,0,0,130,746,1,0,0,0,132,753,1,0,
0,0,134,779,1,0,0,0,136,781,1,0,0,0,138,796,1,0,0,0,140,807,1,0,0,0,142,
818,1,0,0,0,144,829,1,0,0,0,146,831,1,0,0,0,148,833,1,0,0,0,150,836,1,0,
0,0,152,843,1,0,0,0,154,852,1,0,0,0,156,862,1,0,0,0,158,883,1,0,0,0,160,
899,1,0,0,0,162,908,1,0,0,0,164,920,1,0,0,0,166,929,1,0,0,0,168,946,1,0,
0,0,170,955,1,0,0,0,172,957,1,0,0,0,174,179,3,4,2,0,175,176,7,0,0,0,176,
178,3,4,2,0,177,175,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,
0,0,180,1,1,0,0,0,181,179,1,0,0,0,182,187,3,4,2,0,183,184,7,0,0,0,184,186,
3,4,2,0,185,183,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,
188,191,1,0,0,0,189,187,1,0,0,0,190,192,5,75,0,0,191,190,1,0,0,0,191,192,
1,0,0,0,192,3,1,0,0,0,193,195,5,114,0,0,194,193,1,0,0,0,194,195,1,0,0,0,
195,196,1,0,0,0,196,201,3,8,4,0,197,198,7,1,0,0,198,200,3,8,4,0,199,197,
1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,5,1,0,0,0,203,
201,1,0,0,0,204,205,5,102,0,0,205,206,5,104,0,0,206,207,3,2,1,0,207,208,
5,105,0,0,208,7,1,0,0,0,209,221,5,75,0,0,210,221,3,6,3,0,211,221,3,122,61,
0,212,221,3,124,62,0,213,221,3,14,7,0,214,221,5,102,0,0,215,216,5,104,0,
0,216,217,3,2,1,0,217,218,5,105,0,0,218,221,1,0,0,0,219,221,5,110,0,0,220,
209,1,0,0,0,220,210,1,0,0,0,220,211,1,0,0,0,220,212,1,0,0,0,220,213,1,0,
0,0,220,214,1,0,0,0,220,215,1,0,0,0,220,219,1,0,0,0,221,9,1,0,0,0,222,224,
3,12,6,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,
226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,0,0,1,229,11,1,0,0,0,230,302,3,
166,83,0,231,302,3,142,71,0,232,302,3,144,72,0,233,302,3,140,70,0,234,302,
3,146,73,0,235,302,3,148,74,0,236,302,3,150,75,0,237,302,3,152,76,0,238,
302,3,156,78,0,239,302,3,72,36,0,240,302,3,162,81,0,241,302,3,158,79,0,242,
302,3,132,66,0,243,302,3,164,82,0,244,302,3,134,67,0,245,302,3,130,65,0,
246,302,3,154,77,0,247,302,3,128,64,0,248,302,3,126,63,0,249,302,5,1,0,0,
250,302,5,115,0,0,251,302,3,138,69,0,252,302,3,172,86,0,253,302,3,118,59,
0,254,302,3,120,60,0,255,302,3,116,58,0,256,302,3,114,57,0,257,302,3,112,
56,0,258,302,3,110,55,0,259,302,3,104,52,0,260,302,3,108,54,0,261,302,3,
106,53,0,262,302,3,102,51,0,263,302,3,96,48,0,264,302,3,98,49,0,265,302,
3,100,50,0,266,302,3,94,47,0,267,302,3,92,46,0,268,302,3,90,45,0,269,302,
3,88,44,0,270,302,3,86,43,0,271,302,3,84,42,0,272,302,3,82,41,0,273,302,
3,74,37,0,274,302,3,78,39,0,275,302,3,76,38,0,276,302,3,80,40,0,277,302,
3,64,32,0,278,302,3,66,33,0,279,302,3,62,31,0,280,302,3,60,30,0,281,302,
3,58,29,0,282,302,3,56,28,0,283,302,3,54,27,0,284,302,3,50,25,0,285,302,
3,52,26,0,286,302,3,46,23,0,287,302,3,44,22,0,288,302,3,42,21,0,289,302,
3,40,20,0,290,302,3,38,19,0,291,302,3,28,14,0,292,302,3,30,15,0,293,302,
3,26,13,0,294,302,3,32,16,0,295,302,3,34,17,0,296,302,3,22,11,0,297,302,
3,24,12,0,298,302,3,18,9,0,299,302,3,20,10,0,300,302,3,16,8,0,301,230,1,
0,0,0,301,231,1,0,0,0,301,232,1,0,0,0,301,233,1,0,0,0,301,234,1,0,0,0,301,
235,1,0,0,0,301,236,1,0,0,0,301,237,1,0,0,0,301,238,1,0,0,0,301,239,1,0,
0,0,301,240,1,0,0,0,301,241,1,0,0,0,301,242,1,0,0,0,301,243,1,0,0,0,301,
244,1,0,0,0,301,245,1,0,0,0,301,246,1,0,0,0,301,247,1,0,0,0,301,248,1,0,
0,0,301,249,1,0,0,0,301,250,1,0,0,0,301,251,1,0,0,0,301,252,1,0,0,0,301,
253,1,0,0,0,301,254,1,0,0,0,301,255,1,0,0,0,301,256,1,0,0,0,301,257,1,0,
0,0,301,258,1,0,0,0,301,259,1,0,0,0,301,260,1,0,0,0,301,261,1,0,0,0,301,
262,1,0,0,0,301,263,1,0,0,0,301,264,1,0,0,0,301,265,1,0,0,0,301,266,1,0,
0,0,301,267,1,0,0,0,301,268,1,0,0,0,301,269,1,0,0,0,301,270,1,0,0,0,301,
271,1,0,0,0,301,272,1,0,0,0,301,273,1,0,0,0,301,274,1,0,0,0,301,275,1,0,
0,0,301,276,1,0,0,0,301,277,1,0,0,0,301,278,1,0,0,0,301,279,1,0,0,0,301,
280,1,0,0,0,301,281,1,0,0,0,301,282,1,0,0,0,301,283,1,0,0,0,301,284,1,0,
0,0,301,285,1,0,0,0,301,286,1,0,0,0,301,287,1,0,0,0,301,288,1,0,0,0,301,
289,1,0,0,0,301,290,1,0,0,0,301,291,1,0,0,0,301,292,1,0,0,0,301,293,1,0,
0,0,301,294,1,0,0,0,301,295,1,0,0,0,301,296,1,0,0,0,301,297,1,0,0,0,301,
298,1,0,0,0,301,299,1,0,0,0,301,300,1,0,0,0,302,13,1,0,0,0,303,304,5,2,0,
0,304,305,5,104,0,0,305,306,3,2,1,0,306,307,5,105,0,0,307,15,1,0,0,0,308,
309,5,3,0,0,309,310,5,4,0,0,310,17,1,0,0,0,311,312,5,5,0,0,312,313,5,6,0,
0,313,19,1,0,0,0,314,315,5,5,0,0,315,316,5,75,0,0,316,21,1,0,0,0,317,318,
5,7,0,0,318,319,3,2,1,0,319,320,5,78,0,0,320,321,3,2,1,0,321,322,5,89,0,
0,322,323,3,2,1,0,323,324,5,78,0,0,324,325,3,2,1,0,325,23,1,0,0,0,326,327,
5,8,0,0,327,328,3,2,1,0,328,329,5,78,0,0,329,330,3,2,1,0,330,331,5,78,0,
0,331,332,3,2,1,0,332,25,1,0,0,0,333,334,5,9,0,0,334,335,5,102,0,0,335,339,
5,104,0,0,336,340,5,75,0,0,337,340,5,102,0,0,338,340,3,2,1,0,339,336,1,0,
0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,341,1,0,0,0,341,342,5,105,0,0,342,
343,5,10,0,0,343,348,5,102,0,0,344,345,5,78,0,0,345,347,5,102,0,0,346,344,
1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,27,1,0,0,0,350,
348,1,0,0,0,351,352,5,3,0,0,352,353,5,11,0,0,353,354,5,75,0,0,354,355,5,
78,0,0,355,356,5,75,0,0,356,357,5,78,0,0,357,358,5,75,0,0,358,29,1,0,0,0,
359,360,5,3,0,0,360,361,5,75,0,0,361,31,1,0,0,0,362,363,5,12,0,0,363,368,
3,2,1,0,364,365,5,78,0,0,365,367,3,2,1,0,366,364,1,0,0,0,367,370,1,0,0,0,
368,366,1,0,0,0,368,369,1,0,0,0,369,33,1,0,0,0,370,368,1,0,0,0,371,372,5,
13,0,0,372,377,3,36,18,0,373,374,5,78,0,0,374,376,3,36,18,0,375,373,1,0,
0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,35,1,0,0,0,379,377,
1,0,0,0,380,383,3,136,68,0,381,383,5,102,0,0,382,380,1,0,0,0,382,381,1,0,
0,0,383,37,1,0,0,0,384,385,5,14,0,0,385,386,5,102,0,0,386,39,1,0,0,0,387,
388,5,10,0,0,388,389,5,102,0,0,389,41,1,0,0,0,390,391,5,15,0,0,391,392,5,
16,0,0,392,393,5,9,0,0,393,43,1,0,0,0,394,395,5,17,0,0,395,396,5,18,0,0,
396,45,1,0,0,0,397,398,5,15,0,0,398,399,5,19,0,0,399,47,1,0,0,0,400,403,
3,2,1,0,401,403,5,85,0,0,402,400,1,0,0,0,402,401,1,0,0,0,403,49,1,0,0,0,
404,405,5,20,0,0,405,409,5,21,0,0,406,410,3,2,1,0,407,410,5,75,0,0,408,410,
5,85,0,0,409,406,1,0,0,0,409,407,1,0,0,0,409,408,1,0,0,0,410,411,1,0,0,0,
411,415,5,78,0,0,412,416,3,2,1,0,413,416,5,75,0,0,414,416,5,85,0,0,415,412,
1,0,0,0,415,413,1,0,0,0,415,414,1,0,0,0,416,417,1,0,0,0,417,421,5,78,0,0,
418,422,3,2,1,0,419,422,5,75,0,0,420,422,5,85,0,0,421,418,1,0,0,0,421,419,
1,0,0,0,421,420,1,0,0,0,422,423,1,0,0,0,423,427,5,78,0,0,424,428,3,2,1,0,
425,428,5,75,0,0,426,428,5,85,0,0,427,424,1,0,0,0,427,425,1,0,0,0,427,426,
1,0,0,0,428,429,1,0,0,0,429,433,5,78,0,0,430,434,3,2,1,0,431,434,5,75,0,
0,432,434,5,85,0,0,433,430,1,0,0,0,433,431,1,0,0,0,433,432,1,0,0,0,433,434,
1,0,0,0,434,436,1,0,0,0,435,437,5,78,0,0,436,435,1,0,0,0,436,437,1,0,0,0,
437,441,1,0,0,0,438,442,3,2,1,0,439,442,5,75,0,0,440,442,5,85,0,0,441,438,
1,0,0,0,441,439,1,0,0,0,441,440,1,0,0,0,441,442,1,0,0,0,442,51,1,0,0,0,443,
447,5,21,0,0,444,448,3,2,1,0,445,448,5,75,0,0,446,448,5,85,0,0,447,444,1,
0,0,0,447,445,1,0,0,0,447,446,1,0,0,0,448,449,1,0,0,0,449,453,5,78,0,0,450,
454,3,2,1,0,451,454,5,75,0,0,452,454,5,85,0,0,453,450,1,0,0,0,453,451,1,
0,0,0,453,452,1,0,0,0,454,455,1,0,0,0,455,459,5,78,0,0,456,460,3,2,1,0,457,
460,5,75,0,0,458,460,5,85,0,0,459,456,1,0,0,0,459,457,1,0,0,0,459,458,1,
0,0,0,460,461,1,0,0,0,461,465,5,78,0,0,462,466,3,2,1,0,463,466,5,75,0,0,
464,466,5,85,0,0,465,462,1,0,0,0,465,463,1,0,0,0,465,464,1,0,0,0,466,468,
1,0,0,0,467,469,5,78,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,473,1,0,0,0,
470,474,3,2,1,0,471,474,5,75,0,0,472,474,5,85,0,0,473,470,1,0,0,0,473,471,
1,0,0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,477,5,78,0,0,
476,475,1,0,0,0,476,477,1,0,0,0,477,481,1,0,0,0,478,482,3,2,1,0,479,482,
5,75,0,0,480,482,5,85,0,0,481,478,1,0,0,0,481,479,1,0,0,0,481,480,1,0,0,
0,481,482,1,0,0,0,482,53,1,0,0,0,483,484,5,102,0,0,484,485,5,115,0,0,485,
55,1,0,0,0,486,487,5,18,0,0,487,488,5,22,0,0,488,489,5,75,0,0,489,490,5,
78,0,0,490,491,5,75,0,0,491,57,1,0,0,0,492,493,5,23,0,0,493,494,5,24,0,0,
494,495,5,25,0,0,495,59,1,0,0,0,496,497,5,23,0,0,497,498,5,26,0,0,498,499,
5,75,0,0,499,61,1,0,0,0,500,501,5,27,0,0,501,502,5,25,0,0,502,63,1,0,0,0,
503,504,5,28,0,0,504,507,5,85,0,0,505,506,5,78,0,0,506,508,7,2,0,0,507,505,
1,0,0,0,507,508,1,0,0,0,508,65,1,0,0,0,509,518,5,29,0,0,510,511,5,75,0,0,
511,512,5,78,0,0,512,513,7,2,0,0,513,514,5,78,0,0,514,515,7,2,0,0,515,516,
5,78,0,0,516,519,7,2,0,0,517,519,5,19,0,0,518,510,1,0,0,0,518,517,1,0,0,
0,519,67,1,0,0,0,520,521,7,3,0,0,521,69,1,0,0,0,522,523,7,4,0,0,523,71,1,
0,0,0,524,525,5,91,0,0,525,527,3,2,1,0,526,528,3,68,34,0,527,526,1,0,0,0,
527,528,1,0,0,0,528,529,1,0,0,0,529,535,3,0,0,0,530,531,3,70,35,0,531,532,
3,2,1,0,532,533,3,68,34,0,533,534,3,0,0,0,534,536,1,0,0,0,535,530,1,0,0,
0,535,536,1,0,0,0,536,537,1,0,0,0,537,538,5,38,0,0,538,539,3,12,6,0,539,
73,1,0,0,0,540,541,5,39,0,0,541,542,5,40,0,0,542,543,5,75,0,0,543,544,5,
78,0,0,544,545,5,102,0,0,545,75,1,0,0,0,546,547,5,39,0,0,547,548,5,41,0,
0,548,549,5,75,0,0,549,550,5,78,0,0,550,551,5,102,0,0,551,77,1,0,0,0,552,
553,5,42,0,0,553,554,5,75,0,0,554,79,1,0,0,0,555,556,5,43,0,0,556,557,5,
118,0,0,557,558,5,75,0,0,558,559,5,78,0,0,559,561,5,102,0,0,560,562,5,110,
0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,81,1,0,0,0,563,564,5,44,0,0,564,
565,5,104,0,0,565,566,3,2,1,0,566,567,5,78,0,0,567,568,3,2,1,0,568,569,5,
105,0,0,569,83,1,0,0,0,570,574,5,45,0,0,571,573,3,12,6,0,572,571,1,0,0,0,
573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,574,
1,0,0,0,577,578,5,46,0,0,578,579,5,47,0,0,579,580,5,18,0,0,580,581,5,30,
0,0,581,582,5,75,0,0,582,85,1,0,0,0,583,584,5,20,0,0,584,585,5,48,0,0,585,
586,5,75,0,0,586,87,1,0,0,0,587,590,5,49,0,0,588,591,3,136,68,0,589,591,
5,102,0,0,590,588,1,0,0,0,590,589,1,0,0,0,591,599,1,0,0,0,592,595,5,78,0,
0,593,596,3,136,68,0,594,596,5,102,0,0,595,593,1,0,0,0,595,594,1,0,0,0,596,
598,1,0,0,0,597,592,1,0,0,0,598,601,1,0,0,0,599,600,1,0,0,0,599,597,1,0,
0,0,600,89,1,0,0,0,601,599,1,0,0,0,602,603,5,50,0,0,603,604,5,51,0,0,604,
605,3,2,1,0,605,606,5,78,0,0,606,607,3,2,1,0,607,608,5,89,0,0,608,609,3,
2,1,0,609,610,5,78,0,0,610,611,3,2,1,0,611,612,5,78,0,0,612,613,3,2,1,0,
613,614,5,78,0,0,614,615,3,2,1,0,615,91,1,0,0,0,616,617,5,52,0,0,617,619,
5,75,0,0,618,620,5,78,0,0,619,618,1,0,0,0,619,620,1,0,0,0,620,622,1,0,0,
0,621,623,5,75,0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,93,1,0,0,0,624,625,
5,53,0,0,625,626,5,102,0,0,626,627,5,78,0,0,627,633,3,2,1,0,628,629,5,78,
0,0,629,630,3,2,1,0,630,631,5,89,0,0,631,632,5,75,0,0,632,634,1,0,0,0,633,
628,1,0,0,0,633,634,1,0,0,0,634,95,1,0,0,0,635,636,5,54,0,0,636,638,5,55,
0,0,637,639,5,56,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,
641,5,75,0,0,641,642,5,78,0,0,642,643,5,75,0,0,643,644,5,89,0,0,644,645,
5,75,0,0,645,646,5,78,0,0,646,647,5,75,0,0,647,97,1,0,0,0,648,649,5,54,0,
0,649,650,5,57,0,0,650,651,5,75,0,0,651,652,5,78,0,0,652,662,5,75,0,0,653,
654,5,78,0,0,654,655,3,2,1,0,655,656,5,78,0,0,656,657,3,2,1,0,657,658,5,
78,0,0,658,659,3,2,1,0,659,660,5,78,0,0,660,661,3,2,1,0,661,663,1,0,0,0,
662,653,1,0,0,0,662,663,1,0,0,0,663,99,1,0,0,0,664,665,5,54,0,0,665,666,
5,17,0,0,666,667,5,75,0,0,667,668,5,78,0,0,668,678,5,75,0,0,669,670,5,78,
0,0,670,671,3,2,1,0,671,672,5,78,0,0,672,673,3,2,1,0,673,674,5,89,0,0,674,
675,3,2,1,0,675,676,5,78,0,0,676,677,3,2,1,0,677,679,1,0,0,0,678,669,1,0,
0,0,678,679,1,0,0,0,679,101,1,0,0,0,680,681,5,58,0,0,681,682,5,75,0,0,682,
103,1,0,0,0,683,690,5,59,0,0,684,686,5,110,0,0,685,687,5,78,0,0,686,685,
1,0,0,0,686,687,1,0,0,0,687,689,1,0,0,0,688,684,1,0,0,0,689,692,1,0,0,0,
690,688,1,0,0,0,690,691,1,0,0,0,691,105,1,0,0,0,692,690,1,0,0,0,693,694,
5,60,0,0,694,695,5,61,0,0,695,107,1,0,0,0,696,697,5,62,0,0,697,698,5,75,
0,0,698,109,1,0,0,0,699,700,5,63,0,0,700,111,1,0,0,0,701,702,5,64,0,0,702,
703,5,75,0,0,703,113,1,0,0,0,704,705,5,65,0,0,705,115,1,0,0,0,706,708,5,
66,0,0,707,709,5,9,0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,117,1,0,0,0,710,
711,5,67,0,0,711,712,5,19,0,0,712,119,1,0,0,0,713,714,5,67,0,0,714,715,5,
9,0,0,715,121,1,0,0,0,716,717,5,68,0,0,717,721,5,104,0,0,718,722,5,75,0,
0,719,722,5,102,0,0,720,722,3,2,1,0,721,718,1,0,0,0,721,719,1,0,0,0,721,
720,1,0,0,0,722,723,1,0,0,0,723,724,5,105,0,0,724,123,1,0,0,0,725,726,5,
69,0,0,726,730,5,104,0,0,727,731,5,75,0,0,728,731,5,102,0,0,729,731,3,2,
1,0,730,727,1,0,0,0,730,728,1,0,0,0,730,729,1,0,0,0,731,732,1,0,0,0,732,
733,5,105,0,0,733,125,1,0,0,0,734,739,5,96,0,0,735,736,5,110,0,0,736,740,
5,75,0,0,737,740,3,2,1,0,738,740,5,102,0,0,739,735,1,0,0,0,739,737,1,0,0,
0,739,738,1,0,0,0,740,741,1,0,0,0,741,742,5,78,0,0,742,743,5,75,0,0,743,
127,1,0,0,0,744,745,5,100,0,0,745,129,1,0,0,0,746,747,5,102,0,0,747,751,
5,30,0,0,748,752,3,2,1,0,749,752,3,82,41,0,750,752,5,70,0,0,751,748,1,0,
0,0,751,749,1,0,0,0,751,750,1,0,0,0,752,131,1,0,0,0,753,754,5,102,0,0,754,
755,5,106,0,0,755,756,7,2,0,0,756,757,5,107,0,0,757,133,1,0,0,0,758,759,
5,102,0,0,759,760,5,106,0,0,760,761,3,2,1,0,761,762,5,107,0,0,762,780,1,
0,0,0,763,764,5,102,0,0,764,766,5,104,0,0,765,767,3,2,1,0,766,765,1,0,0,
0,766,767,1,0,0,0,767,772,1,0,0,0,768,769,5,78,0,0,769,771,3,2,1,0,770,768,
1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,775,1,0,0,0,
774,772,1,0,0,0,775,780,5,105,0,0,776,777,5,102,0,0,777,778,5,104,0,0,778,
780,5,105,0,0,779,758,1,0,0,0,779,763,1,0,0,0,779,776,1,0,0,0,780,135,1,
0,0,0,781,782,5,102,0,0,782,785,5,104,0,0,783,786,5,75,0,0,784,786,3,2,1,
0,785,783,1,0,0,0,785,784,1,0,0,0,786,788,1,0,0,0,787,789,5,78,0,0,788,787,
1,0,0,0,788,789,1,0,0,0,789,792,1,0,0,0,790,793,5,75,0,0,791,793,3,2,1,0,
792,790,1,0,0,0,792,791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,795,
5,105,0,0,795,137,1,0,0,0,796,797,5,71,0,0,797,804,3,136,68,0,798,800,5,
78,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,803,3,136,68,
0,802,799,1,0,0,0,803,806,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,139,
1,0,0,0,806,804,1,0,0,0,807,808,5,102,0,0,808,812,5,104,0,0,809,813,5,75,
0,0,810,813,5,102,0,0,811,813,3,2,1,0,812,809,1,0,0,0,812,810,1,0,0,0,812,
811,1,0,0,0,813,814,1,0,0,0,814,815,5,105,0,0,815,816,5,30,0,0,816,817,3,
2,1,0,817,141,1,0,0,0,818,819,5,74,0,0,819,820,5,75,0,0,820,821,5,78,0,0,
821,822,5,75,0,0,822,823,5,78,0,0,823,824,5,75,0,0,824,825,5,78,0,0,825,
826,5,75,0,0,826,827,5,78,0,0,827,828,7,5,0,0,828,143,1,0,0,0,829,830,5,
81,0,0,830,145,1,0,0,0,831,832,5,82,0,0,832,147,1,0,0,0,833,834,5,83,0,0,
834,835,5,75,0,0,835,149,1,0,0,0,836,837,5,84,0,0,837,838,5,75,0,0,838,839,
5,78,0,0,839,840,5,75,0,0,840,841,5,78,0,0,841,842,7,6,0,0,842,151,1,0,0,
0,843,847,5,86,0,0,844,846,3,12,6,0,845,844,1,0,0,0,846,849,1,0,0,0,847,
845,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,847,1,0,0,0,850,851,5,87,
0,0,851,153,1,0,0,0,852,853,5,94,0,0,853,857,3,168,84,0,854,856,3,12,6,0,
855,854,1,0,0,0,856,859,1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,860,
1,0,0,0,859,857,1,0,0,0,860,861,5,95,0,0,861,155,1,0,0,0,862,863,5,88,0,
0,863,864,5,102,0,0,864,865,5,30,0,0,865,866,3,2,1,0,866,867,5,89,0,0,867,
871,3,2,1,0,868,870,3,12,6,0,869,868,1,0,0,0,870,873,1,0,0,0,871,869,1,0,
0,0,871,872,1,0,0,0,872,877,1,0,0,0,873,871,1,0,0,0,874,875,5,90,0,0,875,
878,5,102,0,0,876,878,5,90,0,0,877,874,1,0,0,0,877,876,1,0,0,0,878,157,1,
0,0,0,879,880,5,91,0,0,880,884,3,2,1,0,881,882,5,91,0,0,882,884,3,36,18,
0,883,879,1,0,0,0,883,881,1,0,0,0,884,885,1,0,0,0,885,886,7,3,0,0,886,890,
3,0,0,0,887,889,3,12,6,0,888,887,1,0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,
890,891,1,0,0,0,891,897,1,0,0,0,892,890,1,0,0,0,893,894,5,1,0,0,894,898,
5,72,0,0,895,898,3,160,80,0,896,898,5,93,0,0,897,893,1,0,0,0,897,895,1,0,
0,0,897,896,1,0,0,0,898,159,1,0,0,0,899,903,5,92,0,0,900,902,3,12,6,0,901,
900,1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,903,904,1,0,0,0,904,906,1,0,
0,0,905,903,1,0,0,0,906,907,5,93,0,0,907,161,1,0,0,0,908,909,5,91,0,0,909,
913,3,168,84,0,910,912,3,12,6,0,911,910,1,0,0,0,912,915,1,0,0,0,913,911,
1,0,0,0,913,914,1,0,0,0,914,918,1,0,0,0,915,913,1,0,0,0,916,919,3,160,80,
0,917,919,5,93,0,0,918,916,1,0,0,0,918,917,1,0,0,0,919,163,1,0,0,0,920,921,
5,99,0,0,921,922,3,2,1,0,922,923,5,78,0,0,923,924,3,0,0,0,924,925,5,89,0,
0,925,926,3,2,1,0,926,927,5,78,0,0,927,928,3,0,0,0,928,165,1,0,0,0,929,930,
5,97,0,0,930,936,5,102,0,0,931,933,5,106,0,0,932,934,5,102,0,0,933,932,1,
0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,937,5,107,0,0,936,931,1,0,0,0,
936,937,1,0,0,0,937,941,1,0,0,0,938,940,3,12,6,0,939,938,1,0,0,0,940,943,
1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,942,944,1,0,0,0,943,941,1,0,0,0,
944,945,5,98,0,0,945,167,1,0,0,0,946,947,5,101,0,0,947,948,5,104,0,0,948,
949,3,2,1,0,949,950,5,105,0,0,950,169,1,0,0,0,951,956,3,2,1,0,952,956,5,
85,0,0,953,954,5,118,0,0,954,956,5,75,0,0,955,951,1,0,0,0,955,952,1,0,0,
0,955,953,1,0,0,0,956,171,1,0,0,0,957,958,5,73,0,0,958,963,3,170,85,0,959,
960,7,7,0,0,960,962,3,170,85,0,961,959,1,0,0,0,962,965,1,0,0,0,963,964,1,
0,0,0,963,961,1,0,0,0,964,173,1,0,0,0,965,963,1,0,0,0,75,179,187,191,194,
201,220,225,301,339,348,368,377,382,402,409,415,421,427,433,436,441,447,
453,459,465,468,473,476,481,507,518,527,535,561,574,590,595,599,619,622,
633,638,662,678,686,690,708,721,730,739,751,766,772,779,785,788,792,799,
804,812,847,857,871,877,883,890,897,903,913,918,933,936,941,955,963];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class AMOSParser extends antlr4.Parser {

    static grammarFileName = "AMOS.g4";
    static literalNames = [ null, "'End'", "'Rnd'", "'Screen'", "'Swap'", 
                            "'Wait'", "'Vbl'", "'Box'", "'Circle'", "'On'", 
                            "'Gosub'", "'Offset'", "'Data'", "'Read'", "'Goto'", 
                            "'Bob'", "'Update'", "'Clear'", "'Key'", "'Off'", 
                            "'Set'", "'Rainbow'", "'Speed'", "'SAM'", "'LOOP'", 
                            "'OFF'", "'BANK'", "'LED'", "'Load'", "'Sprite'", 
                            "'='", "'<>'", "'>='", "'>'", "'<='", "'<'", 
                            "'or'", "'and'", "'then'", "'Open'", "'Out'", 
                            "'In'", "'Close'", "'Input'", "'Btst'", "'Repeat'", 
                            "'Until'", "'Mouse'", "'Buffers'", "'Global'", 
                            "'Turbo'", "'Draw'", "'Locate'", "'Add'", "'Blitter'", 
                            "'Copy'", "'Limit'", "'Fill'", "'Autoback'", 
                            "'Palette'", "'Double'", "'Buffer'", "'Pen'", 
                            "'Cls'", "'Paper'", "'Degree'", "'Hide'", "'Flash'", 
                            "'Sin'", "'Cos'", "'\"\"'", "'Dim'", "'if'", 
                            "'Print'", "'Screen Open'", null, "'Lowres'", 
                            "'Hires'", "','", null, null, "'Curs Off'", 
                            "'Curs On'", "'Ink'", "'Text'", null, "'Do'", 
                            "'Loop'", "'For'", "'To'", "'Next'", "'If'", 
                            "'Else'", "'End If'", "'While'", "'Wend'", "'Play'", 
                            "'Procedure'", "'End Proc'", "'Bar'", "'Wait Key'", 
                            "'Key State'", null, null, "'('", "')'", "'['", 
                            "']'", "'{'", "'}'", null, "'*'", "'/'", "'+'", 
                            "'-'", "':'", "';'", "'.'", "'#'", "'%'", "'?'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, "SCREENOPEN", "NUMBER", "LOWRES", 
                             "HIRES", "COMMA", "COMMENT", "WS", "CURSOFF", 
                             "CURSON", "INK", "TEXT", "STRING", "DO", "LOOP", 
                             "FOR", "TO", "NEXT", "IF", "ELSE", "ENDIF", 
                             "WHILE", "WEND", "PLAY", "PROC", "ENDPROC", 
                             "BAR", "WAITKEY", "KEYSTATE", "IDENTIFIER", 
                             "COMPARISON", "BRACKETOPEN_PROP", "BRACKETCLOSE_PROP", 
                             "BRACKETOPEN_ARRAY", "BRACKETCLOSE_ARRAY", 
                             "BRACKETOPEN_FUNCTION", "BRACKETCLOSE_FUNCTION", 
                             "HEX_NUMBER", "MULTIPLY", "DIVIDE", "ADD", 
                             "SUBTRACT", "STATEMENT_SEPARATOR", "FINISH_AND_ADD_OTHER_STATEMENT", 
                             "DOT", "HASHTAG", "PERCENT", "QUESTION" ];
    static ruleNames = [ "expression2", "expression1", "term", "array_index_get", 
                         "factor", "program", "statement", "rndFunction", 
                         "screen_swap", "wait_vbl", "wait_key", "box", "circle", 
                         "on_gosub", "screen_offset", "choose_Screen", "data_statement", 
                         "read_statement", "read_target", "goto_label", 
                         "gosub", "bob_update_on", "clear_key", "bob_off", 
                         "value", "set_rainbow", "use_rainbow", "label_title", 
                         "key_speed", "sam_loop", "sam_bank", "led_off", 
                         "loadBank", "loadBankImgToSprite", "expressions_comparators", 
                         "or_and", "if_then", "open_out_readfile", "open_in_writefile", 
                         "close_file", "input_variable", "btst", "repeat_key", 
                         "set_buffer", "global", "turbo_draw", "locate", 
                         "add", "blitter_copy", "blitter_fill", "blitter_clear", 
                         "autoback", "palette", "double_buffer", "pen", 
                         "cls", "paper", "degree", "hide", "flash_off", 
                         "flash_on", "sin_function", "cos_function", "play_sound", 
                         "wait_key_break", "variable_starter", "function_starter", 
                         "function_call_or_array_access", "array_structure", 
                         "array_create", "array_update", "screen_open", 
                         "curs_off", "curs_on", "ink", "text", "do_loop", 
                         "while_wend", "for_loop", "if_statement", "else_statement", 
                         "if_statement_key_state", "bar", "procedure", "current_Key_State", 
                         "print_options", "print_something" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = AMOSParser.ruleNames;
        this.literalNames = AMOSParser.literalNames;
        this.symbolicNames = AMOSParser.symbolicNames;
    }



	expression2() {
	    let localctx = new Expression2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, AMOSParser.RULE_expression2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 174;
	        this.term();
	        this.state = 179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===113 || _la===114) {
	            this.state = 175;
	            _la = this._input.LA(1);
	            if(!(_la===113 || _la===114)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 176;
	            this.term();
	            this.state = 181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression1() {
	    let localctx = new Expression1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, AMOSParser.RULE_expression1);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 182;
	        this.term();
	        this.state = 187;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 183;
	                _la = this._input.LA(1);
	                if(!(_la===113 || _la===114)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 184;
	                this.term(); 
	            }
	            this.state = 189;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	        }

	        this.state = 191;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        if(la_===1) {
	            this.state = 190;
	            this.match(AMOSParser.NUMBER);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, AMOSParser.RULE_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 194;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===114) {
	            this.state = 193;
	            this.match(AMOSParser.SUBTRACT);
	        }

	        this.state = 196;
	        this.factor();
	        this.state = 201;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===111 || _la===112) {
	            this.state = 197;
	            _la = this._input.LA(1);
	            if(!(_la===111 || _la===112)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 198;
	            this.factor();
	            this.state = 203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_index_get() {
	    let localctx = new Array_index_getContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, AMOSParser.RULE_array_index_get);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 204;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 205;
	        this.match(AMOSParser.BRACKETOPEN_PROP);

	        this.state = 206;
	        this.expression1();
	        this.state = 207;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, AMOSParser.RULE_factor);
	    try {
	        this.state = 220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 209;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 210;
	            this.array_index_get();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 211;
	            this.sin_function();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 212;
	            this.cos_function();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 213;
	            this.rndFunction();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 214;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 215;
	            this.match(AMOSParser.BRACKETOPEN_PROP);
	            this.state = 216;
	            this.expression1();
	            this.state = 217;
	            this.match(AMOSParser.BRACKETCLOSE_PROP);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 219;
	            this.match(AMOSParser.HEX_NUMBER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, AMOSParser.RULE_program);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 951515050) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 532212857) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 3063069709) !== 0) || _la===115) {
	            this.state = 222;
	            this.statement();
	            this.state = 227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 228;
	        this.match(AMOSParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, AMOSParser.RULE_statement);
	    try {
	        this.state = 301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 230;
	            this.procedure();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 231;
	            this.screen_open();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 232;
	            this.curs_off();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 233;
	            this.array_update();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 234;
	            this.curs_on();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 235;
	            this.ink();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 236;
	            this.text();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 237;
	            this.do_loop();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 238;
	            this.for_loop();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 239;
	            this.if_then();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 240;
	            this.if_statement_key_state();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 241;
	            this.if_statement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 242;
	            this.function_starter();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 243;
	            this.bar();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 244;
	            this.function_call_or_array_access();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 245;
	            this.variable_starter();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 246;
	            this.while_wend();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 247;
	            this.wait_key_break();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 248;
	            this.play_sound();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 249;
	            this.match(AMOSParser.T__0);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 250;
	            this.match(AMOSParser.STATEMENT_SEPARATOR);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 251;
	            this.array_create();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 252;
	            this.print_something();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 253;
	            this.flash_off();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 254;
	            this.flash_on();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 255;
	            this.hide();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 256;
	            this.degree();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 257;
	            this.paper();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 258;
	            this.cls();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 259;
	            this.palette();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 260;
	            this.pen();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 261;
	            this.double_buffer();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 262;
	            this.autoback();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 263;
	            this.blitter_copy();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 264;
	            this.blitter_fill();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 265;
	            this.blitter_clear();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 266;
	            this.add();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 267;
	            this.locate();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 268;
	            this.turbo_draw();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 269;
	            this.global();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 270;
	            this.set_buffer();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 271;
	            this.repeat_key();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 272;
	            this.btst();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 273;
	            this.open_out_readfile();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 274;
	            this.close_file();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 275;
	            this.open_in_writefile();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 276;
	            this.input_variable();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 277;
	            this.loadBank();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 278;
	            this.loadBankImgToSprite();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 279;
	            this.led_off();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 280;
	            this.sam_bank();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 281;
	            this.sam_loop();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 282;
	            this.key_speed();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 283;
	            this.label_title();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 284;
	            this.set_rainbow();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 285;
	            this.use_rainbow();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 286;
	            this.bob_off();
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 287;
	            this.clear_key();
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 288;
	            this.bob_update_on();
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 289;
	            this.gosub();
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 290;
	            this.goto_label();
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 291;
	            this.screen_offset();
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 292;
	            this.choose_Screen();
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 293;
	            this.on_gosub();
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 294;
	            this.data_statement();
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 295;
	            this.read_statement();
	            break;

	        case 67:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 296;
	            this.box();
	            break;

	        case 68:
	            this.enterOuterAlt(localctx, 68);
	            this.state = 297;
	            this.circle();
	            break;

	        case 69:
	            this.enterOuterAlt(localctx, 69);
	            this.state = 298;
	            this.wait_vbl();
	            break;

	        case 70:
	            this.enterOuterAlt(localctx, 70);
	            this.state = 299;
	            this.wait_key();
	            break;

	        case 71:
	            this.enterOuterAlt(localctx, 71);
	            this.state = 300;
	            this.screen_swap();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rndFunction() {
	    let localctx = new RndFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, AMOSParser.RULE_rndFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 303;
	        this.match(AMOSParser.T__1);
	        this.state = 304;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 305;
	        this.expression1();
	        this.state = 306;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screen_swap() {
	    let localctx = new Screen_swapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, AMOSParser.RULE_screen_swap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 308;
	        this.match(AMOSParser.T__2);
	        this.state = 309;
	        this.match(AMOSParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wait_vbl() {
	    let localctx = new Wait_vblContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, AMOSParser.RULE_wait_vbl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 311;
	        this.match(AMOSParser.T__4);
	        this.state = 312;
	        this.match(AMOSParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wait_key() {
	    let localctx = new Wait_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, AMOSParser.RULE_wait_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 314;
	        this.match(AMOSParser.T__4);
	        this.state = 315;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	box() {
	    let localctx = new BoxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, AMOSParser.RULE_box);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 317;
	        this.match(AMOSParser.T__6);
	        this.state = 318;
	        this.expression1();
	        this.state = 319;
	        this.match(AMOSParser.COMMA);
	        this.state = 320;
	        this.expression1();
	        this.state = 321;
	        this.match(AMOSParser.TO);
	        this.state = 322;
	        this.expression1();
	        this.state = 323;
	        this.match(AMOSParser.COMMA);
	        this.state = 324;
	        this.expression1();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	circle() {
	    let localctx = new CircleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, AMOSParser.RULE_circle);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 326;
	        this.match(AMOSParser.T__7);
	        this.state = 327;
	        this.expression1();
	        this.state = 328;
	        this.match(AMOSParser.COMMA);
	        this.state = 329;
	        this.expression1();
	        this.state = 330;
	        this.match(AMOSParser.COMMA);
	        this.state = 331;
	        this.expression1();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	on_gosub() {
	    let localctx = new On_gosubContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, AMOSParser.RULE_on_gosub);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 333;
	        this.match(AMOSParser.T__8);
	        this.state = 334;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 335;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 336;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 337;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 3:
	            this.state = 338;
	            this.expression1();
	            break;

	        }
	        this.state = 341;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	        this.state = 342;
	        this.match(AMOSParser.T__9);
	        this.state = 343;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===78) {
	            this.state = 344;
	            this.match(AMOSParser.COMMA);
	            this.state = 345;
	            this.match(AMOSParser.IDENTIFIER);
	            this.state = 350;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screen_offset() {
	    let localctx = new Screen_offsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, AMOSParser.RULE_screen_offset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 351;
	        this.match(AMOSParser.T__2);
	        this.state = 352;
	        this.match(AMOSParser.T__10);
	        this.state = 353;
	        this.match(AMOSParser.NUMBER);
	        this.state = 354;
	        this.match(AMOSParser.COMMA);
	        this.state = 355;
	        this.match(AMOSParser.NUMBER);
	        this.state = 356;
	        this.match(AMOSParser.COMMA);
	        this.state = 357;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	choose_Screen() {
	    let localctx = new Choose_ScreenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, AMOSParser.RULE_choose_Screen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 359;
	        this.match(AMOSParser.T__2);
	        this.state = 360;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	data_statement() {
	    let localctx = new Data_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, AMOSParser.RULE_data_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.match(AMOSParser.T__11);
	        this.state = 363;
	        this.expression1();
	        this.state = 368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===78) {
	            this.state = 364;
	            this.match(AMOSParser.COMMA);
	            this.state = 365;
	            this.expression1();
	            this.state = 370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_statement() {
	    let localctx = new Read_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, AMOSParser.RULE_read_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 371;
	        this.match(AMOSParser.T__12);
	        this.state = 372;
	        this.read_target();
	        this.state = 377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===78) {
	            this.state = 373;
	            this.match(AMOSParser.COMMA);
	            this.state = 374;
	            this.read_target();
	            this.state = 379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	read_target() {
	    let localctx = new Read_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, AMOSParser.RULE_read_target);
	    try {
	        this.state = 382;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 380;
	            this.array_structure();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 381;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goto_label() {
	    let localctx = new Goto_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, AMOSParser.RULE_goto_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 384;
	        this.match(AMOSParser.T__13);
	        this.state = 385;
	        this.match(AMOSParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gosub() {
	    let localctx = new GosubContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, AMOSParser.RULE_gosub);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        this.match(AMOSParser.T__9);
	        this.state = 388;
	        this.match(AMOSParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bob_update_on() {
	    let localctx = new Bob_update_onContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, AMOSParser.RULE_bob_update_on);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 390;
	        this.match(AMOSParser.T__14);
	        this.state = 391;
	        this.match(AMOSParser.T__15);
	        this.state = 392;
	        this.match(AMOSParser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clear_key() {
	    let localctx = new Clear_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, AMOSParser.RULE_clear_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 394;
	        this.match(AMOSParser.T__16);
	        this.state = 395;
	        this.match(AMOSParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bob_off() {
	    let localctx = new Bob_offContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, AMOSParser.RULE_bob_off);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 397;
	        this.match(AMOSParser.T__14);
	        this.state = 398;
	        this.match(AMOSParser.T__18);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, AMOSParser.RULE_value);
	    try {
	        this.state = 402;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 68:
	        case 69:
	        case 75:
	        case 102:
	        case 104:
	        case 110:
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 400;
	            this.expression1();
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 401;
	            this.match(AMOSParser.STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_rainbow() {
	    let localctx = new Set_rainbowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, AMOSParser.RULE_set_rainbow);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 404;
	        this.match(AMOSParser.T__19);
	        this.state = 405;
	        this.match(AMOSParser.T__20);
	        this.state = 409;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 406;
	            this.expression1();
	            break;

	        case 2:
	            this.state = 407;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 3:
	            this.state = 408;
	            this.match(AMOSParser.STRING);
	            break;

	        }
	        this.state = 411;
	        this.match(AMOSParser.COMMA);
	        this.state = 415;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 412;
	            this.expression1();
	            break;

	        case 2:
	            this.state = 413;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 3:
	            this.state = 414;
	            this.match(AMOSParser.STRING);
	            break;

	        }
	        this.state = 417;
	        this.match(AMOSParser.COMMA);
	        this.state = 421;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 418;
	            this.expression1();
	            break;

	        case 2:
	            this.state = 419;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 3:
	            this.state = 420;
	            this.match(AMOSParser.STRING);
	            break;

	        }
	        this.state = 423;
	        this.match(AMOSParser.COMMA);
	        this.state = 427;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 424;
	            this.expression1();
	            break;

	        case 2:
	            this.state = 425;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 3:
	            this.state = 426;
	            this.match(AMOSParser.STRING);
	            break;

	        }
	        this.state = 429;
	        this.match(AMOSParser.COMMA);
	        this.state = 433;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 430;
	            this.expression1();

	        } else if(la_===2) {
	            this.state = 431;
	            this.match(AMOSParser.NUMBER);

	        } else if(la_===3) {
	            this.state = 432;
	            this.match(AMOSParser.STRING);

	        }
	        this.state = 436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 435;
	            this.match(AMOSParser.COMMA);
	        }

	        this.state = 441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 438;
	            this.expression1();

	        } else if(la_===2) {
	            this.state = 439;
	            this.match(AMOSParser.NUMBER);

	        } else if(la_===3) {
	            this.state = 440;
	            this.match(AMOSParser.STRING);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_rainbow() {
	    let localctx = new Use_rainbowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, AMOSParser.RULE_use_rainbow);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 443;
	        this.match(AMOSParser.T__20);
	        this.state = 447;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 444;
	            this.expression1();
	            break;

	        case 2:
	            this.state = 445;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 3:
	            this.state = 446;
	            this.match(AMOSParser.STRING);
	            break;

	        }
	        this.state = 449;
	        this.match(AMOSParser.COMMA);
	        this.state = 453;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 450;
	            this.expression1();
	            break;

	        case 2:
	            this.state = 451;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 3:
	            this.state = 452;
	            this.match(AMOSParser.STRING);
	            break;

	        }
	        this.state = 455;
	        this.match(AMOSParser.COMMA);
	        this.state = 459;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 456;
	            this.expression1();
	            break;

	        case 2:
	            this.state = 457;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 3:
	            this.state = 458;
	            this.match(AMOSParser.STRING);
	            break;

	        }
	        this.state = 461;
	        this.match(AMOSParser.COMMA);
	        this.state = 465;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 462;
	            this.expression1();
	            break;

	        case 2:
	            this.state = 463;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 3:
	            this.state = 464;
	            this.match(AMOSParser.STRING);
	            break;

	        }
	        this.state = 468;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        if(la_===1) {
	            this.state = 467;
	            this.match(AMOSParser.COMMA);

	        }
	        this.state = 473;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        if(la_===1) {
	            this.state = 470;
	            this.expression1();

	        } else if(la_===2) {
	            this.state = 471;
	            this.match(AMOSParser.NUMBER);

	        } else if(la_===3) {
	            this.state = 472;
	            this.match(AMOSParser.STRING);

	        }
	        this.state = 476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 475;
	            this.match(AMOSParser.COMMA);
	        }

	        this.state = 481;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 478;
	            this.expression1();

	        } else if(la_===2) {
	            this.state = 479;
	            this.match(AMOSParser.NUMBER);

	        } else if(la_===3) {
	            this.state = 480;
	            this.match(AMOSParser.STRING);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label_title() {
	    let localctx = new Label_titleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, AMOSParser.RULE_label_title);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 483;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 484;
	        this.match(AMOSParser.STATEMENT_SEPARATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_speed() {
	    let localctx = new Key_speedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, AMOSParser.RULE_key_speed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 486;
	        this.match(AMOSParser.T__17);
	        this.state = 487;
	        this.match(AMOSParser.T__21);
	        this.state = 488;
	        this.match(AMOSParser.NUMBER);
	        this.state = 489;
	        this.match(AMOSParser.COMMA);
	        this.state = 490;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sam_loop() {
	    let localctx = new Sam_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, AMOSParser.RULE_sam_loop);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 492;
	        this.match(AMOSParser.T__22);
	        this.state = 493;
	        this.match(AMOSParser.T__23);
	        this.state = 494;
	        this.match(AMOSParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sam_bank() {
	    let localctx = new Sam_bankContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, AMOSParser.RULE_sam_bank);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        this.match(AMOSParser.T__22);
	        this.state = 497;
	        this.match(AMOSParser.T__25);
	        this.state = 498;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	led_off() {
	    let localctx = new Led_offContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, AMOSParser.RULE_led_off);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 500;
	        this.match(AMOSParser.T__26);
	        this.state = 501;
	        this.match(AMOSParser.T__24);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadBank() {
	    let localctx = new LoadBankContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, AMOSParser.RULE_loadBank);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        this.match(AMOSParser.T__27);
	        this.state = 504;
	        this.match(AMOSParser.STRING);
	        this.state = 507;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 505;
	            this.match(AMOSParser.COMMA);
	            this.state = 506;
	            _la = this._input.LA(1);
	            if(!(_la===75 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadBankImgToSprite() {
	    let localctx = new LoadBankImgToSpriteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, AMOSParser.RULE_loadBankImgToSprite);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 509;
	        this.match(AMOSParser.T__28);
	        this.state = 518;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 75:
	            this.state = 510;
	            this.match(AMOSParser.NUMBER);
	            this.state = 511;
	            this.match(AMOSParser.COMMA);
	            this.state = 512;
	            _la = this._input.LA(1);
	            if(!(_la===75 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 513;
	            this.match(AMOSParser.COMMA);
	            this.state = 514;
	            _la = this._input.LA(1);
	            if(!(_la===75 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 515;
	            this.match(AMOSParser.COMMA);
	            this.state = 516;
	            _la = this._input.LA(1);
	            if(!(_la===75 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 19:
	            this.state = 517;
	            this.match(AMOSParser.T__18);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressions_comparators() {
	    let localctx = new Expressions_comparatorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, AMOSParser.RULE_expressions_comparators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        _la = this._input.LA(1);
	        if(!(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 63) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_and() {
	    let localctx = new Or_andContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, AMOSParser.RULE_or_and);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        _la = this._input.LA(1);
	        if(!(_la===36 || _la===37)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_then() {
	    let localctx = new If_thenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, AMOSParser.RULE_if_then);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 524;
	        this.match(AMOSParser.IF);
	        this.state = 525;
	        this.expression1();
	        this.state = 527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 63) !== 0)) {
	            this.state = 526;
	            this.expressions_comparators();
	        }

	        this.state = 529;
	        this.expression2();
	        this.state = 535;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36 || _la===37) {
	            this.state = 530;
	            this.or_and();
	            this.state = 531;
	            this.expression1();
	            this.state = 532;
	            this.expressions_comparators();
	            this.state = 533;
	            this.expression2();
	        }

	        this.state = 537;
	        this.match(AMOSParser.T__37);
	        this.state = 538;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	open_out_readfile() {
	    let localctx = new Open_out_readfileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, AMOSParser.RULE_open_out_readfile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        this.match(AMOSParser.T__38);
	        this.state = 541;
	        this.match(AMOSParser.T__39);
	        this.state = 542;
	        this.match(AMOSParser.NUMBER);
	        this.state = 543;
	        this.match(AMOSParser.COMMA);
	        this.state = 544;
	        this.match(AMOSParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	open_in_writefile() {
	    let localctx = new Open_in_writefileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, AMOSParser.RULE_open_in_writefile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this.match(AMOSParser.T__38);
	        this.state = 547;
	        this.match(AMOSParser.T__40);
	        this.state = 548;
	        this.match(AMOSParser.NUMBER);
	        this.state = 549;
	        this.match(AMOSParser.COMMA);
	        this.state = 550;
	        this.match(AMOSParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	close_file() {
	    let localctx = new Close_fileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, AMOSParser.RULE_close_file);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this.match(AMOSParser.T__41);
	        this.state = 553;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	input_variable() {
	    let localctx = new Input_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, AMOSParser.RULE_input_variable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 555;
	        this.match(AMOSParser.T__42);
	        this.state = 556;
	        this.match(AMOSParser.HASHTAG);
	        this.state = 557;
	        this.match(AMOSParser.NUMBER);
	        this.state = 558;
	        this.match(AMOSParser.COMMA);
	        this.state = 559;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110) {
	            this.state = 560;
	            this.match(AMOSParser.HEX_NUMBER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	btst() {
	    let localctx = new BtstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, AMOSParser.RULE_btst);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this.match(AMOSParser.T__43);
	        this.state = 564;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 565;
	        this.expression1();
	        this.state = 566;
	        this.match(AMOSParser.COMMA);
	        this.state = 567;
	        this.expression1();
	        this.state = 568;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeat_key() {
	    let localctx = new Repeat_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, AMOSParser.RULE_repeat_key);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        this.match(AMOSParser.T__44);
	        this.state = 574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 951515050) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 532212857) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 3063069709) !== 0) || _la===115) {
	            this.state = 571;
	            this.statement();
	            this.state = 576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 577;
	        this.match(AMOSParser.T__45);
	        this.state = 578;
	        this.match(AMOSParser.T__46);
	        this.state = 579;
	        this.match(AMOSParser.T__17);
	        this.state = 580;
	        this.match(AMOSParser.T__29);
	        this.state = 581;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_buffer() {
	    let localctx = new Set_bufferContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, AMOSParser.RULE_set_buffer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        this.match(AMOSParser.T__19);
	        this.state = 584;
	        this.match(AMOSParser.T__47);
	        this.state = 585;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global() {
	    let localctx = new GlobalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, AMOSParser.RULE_global);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this.match(AMOSParser.T__48);
	        this.state = 590;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 588;
	            this.array_structure();
	            break;

	        case 2:
	            this.state = 589;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        }
	        this.state = 599;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 592;
	                this.match(AMOSParser.COMMA);
	                this.state = 595;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 593;
	                    this.array_structure();
	                    break;

	                case 2:
	                    this.state = 594;
	                    this.match(AMOSParser.IDENTIFIER);
	                    break;

	                } 
	            }
	            this.state = 601;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	turbo_draw() {
	    let localctx = new Turbo_drawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, AMOSParser.RULE_turbo_draw);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this.match(AMOSParser.T__49);
	        this.state = 603;
	        this.match(AMOSParser.T__50);
	        this.state = 604;
	        this.expression1();
	        this.state = 605;
	        this.match(AMOSParser.COMMA);
	        this.state = 606;
	        this.expression1();
	        this.state = 607;
	        this.match(AMOSParser.TO);
	        this.state = 608;
	        this.expression1();
	        this.state = 609;
	        this.match(AMOSParser.COMMA);
	        this.state = 610;
	        this.expression1();
	        this.state = 611;
	        this.match(AMOSParser.COMMA);
	        this.state = 612;
	        this.expression1();
	        this.state = 613;
	        this.match(AMOSParser.COMMA);
	        this.state = 614;
	        this.expression1();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	locate() {
	    let localctx = new LocateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, AMOSParser.RULE_locate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 616;
	        this.match(AMOSParser.T__51);
	        this.state = 617;
	        this.match(AMOSParser.NUMBER);
	        this.state = 619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 618;
	            this.match(AMOSParser.COMMA);
	        }

	        this.state = 622;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75) {
	            this.state = 621;
	            this.match(AMOSParser.NUMBER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add() {
	    let localctx = new AddContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, AMOSParser.RULE_add);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 624;
	        this.match(AMOSParser.T__52);
	        this.state = 625;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 626;
	        this.match(AMOSParser.COMMA);
	        this.state = 627;
	        this.expression1();
	        this.state = 633;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 628;
	            this.match(AMOSParser.COMMA);
	            this.state = 629;
	            this.expression1();
	            this.state = 630;
	            this.match(AMOSParser.TO);
	            this.state = 631;
	            this.match(AMOSParser.NUMBER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blitter_copy() {
	    let localctx = new Blitter_copyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, AMOSParser.RULE_blitter_copy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 635;
	        this.match(AMOSParser.T__53);
	        this.state = 636;
	        this.match(AMOSParser.T__54);
	        this.state = 638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 637;
	            this.match(AMOSParser.T__55);
	        }

	        this.state = 640;
	        this.match(AMOSParser.NUMBER);
	        this.state = 641;
	        this.match(AMOSParser.COMMA);
	        this.state = 642;
	        this.match(AMOSParser.NUMBER);
	        this.state = 643;
	        this.match(AMOSParser.TO);
	        this.state = 644;
	        this.match(AMOSParser.NUMBER);
	        this.state = 645;
	        this.match(AMOSParser.COMMA);
	        this.state = 646;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blitter_fill() {
	    let localctx = new Blitter_fillContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, AMOSParser.RULE_blitter_fill);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.match(AMOSParser.T__53);
	        this.state = 649;
	        this.match(AMOSParser.T__56);
	        this.state = 650;
	        this.match(AMOSParser.NUMBER);
	        this.state = 651;
	        this.match(AMOSParser.COMMA);
	        this.state = 652;
	        this.match(AMOSParser.NUMBER);
	        this.state = 662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 653;
	            this.match(AMOSParser.COMMA);
	            this.state = 654;
	            this.expression1();
	            this.state = 655;
	            this.match(AMOSParser.COMMA);
	            this.state = 656;
	            this.expression1();
	            this.state = 657;
	            this.match(AMOSParser.COMMA);
	            this.state = 658;
	            this.expression1();
	            this.state = 659;
	            this.match(AMOSParser.COMMA);
	            this.state = 660;
	            this.expression1();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blitter_clear() {
	    let localctx = new Blitter_clearContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, AMOSParser.RULE_blitter_clear);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 664;
	        this.match(AMOSParser.T__53);
	        this.state = 665;
	        this.match(AMOSParser.T__16);
	        this.state = 666;
	        this.match(AMOSParser.NUMBER);
	        this.state = 667;
	        this.match(AMOSParser.COMMA);
	        this.state = 668;
	        this.match(AMOSParser.NUMBER);
	        this.state = 678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 669;
	            this.match(AMOSParser.COMMA);
	            this.state = 670;
	            this.expression1();
	            this.state = 671;
	            this.match(AMOSParser.COMMA);
	            this.state = 672;
	            this.expression1();
	            this.state = 673;
	            this.match(AMOSParser.TO);
	            this.state = 674;
	            this.expression1();
	            this.state = 675;
	            this.match(AMOSParser.COMMA);
	            this.state = 676;
	            this.expression1();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	autoback() {
	    let localctx = new AutobackContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, AMOSParser.RULE_autoback);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this.match(AMOSParser.T__57);
	        this.state = 681;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	palette() {
	    let localctx = new PaletteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, AMOSParser.RULE_palette);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this.match(AMOSParser.T__58);
	        this.state = 690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===110) {
	            this.state = 684;
	            this.match(AMOSParser.HEX_NUMBER);
	            this.state = 686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===78) {
	                this.state = 685;
	                this.match(AMOSParser.COMMA);
	            }

	            this.state = 692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	double_buffer() {
	    let localctx = new Double_bufferContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, AMOSParser.RULE_double_buffer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        this.match(AMOSParser.T__59);
	        this.state = 694;
	        this.match(AMOSParser.T__60);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pen() {
	    let localctx = new PenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, AMOSParser.RULE_pen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        this.match(AMOSParser.T__61);
	        this.state = 697;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cls() {
	    let localctx = new ClsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, AMOSParser.RULE_cls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 699;
	        this.match(AMOSParser.T__62);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paper() {
	    let localctx = new PaperContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, AMOSParser.RULE_paper);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701;
	        this.match(AMOSParser.T__63);
	        this.state = 702;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	degree() {
	    let localctx = new DegreeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, AMOSParser.RULE_degree);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 704;
	        this.match(AMOSParser.T__64);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hide() {
	    let localctx = new HideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, AMOSParser.RULE_hide);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 706;
	        this.match(AMOSParser.T__65);
	        this.state = 708;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        if(la_===1) {
	            this.state = 707;
	            this.match(AMOSParser.T__8);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flash_off() {
	    let localctx = new Flash_offContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, AMOSParser.RULE_flash_off);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 710;
	        this.match(AMOSParser.T__66);
	        this.state = 711;
	        this.match(AMOSParser.T__18);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flash_on() {
	    let localctx = new Flash_onContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, AMOSParser.RULE_flash_on);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this.match(AMOSParser.T__66);
	        this.state = 714;
	        this.match(AMOSParser.T__8);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sin_function() {
	    let localctx = new Sin_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, AMOSParser.RULE_sin_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 716;
	        this.match(AMOSParser.T__67);
	        this.state = 717;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 721;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 718;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 719;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 3:
	            this.state = 720;
	            this.expression1();
	            break;

	        }
	        this.state = 723;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cos_function() {
	    let localctx = new Cos_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, AMOSParser.RULE_cos_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 725;
	        this.match(AMOSParser.T__68);
	        this.state = 726;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 730;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 727;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 728;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 3:
	            this.state = 729;
	            this.expression1();
	            break;

	        }
	        this.state = 732;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	play_sound() {
	    let localctx = new Play_soundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, AMOSParser.RULE_play_sound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 734;
	        this.match(AMOSParser.PLAY);
	        this.state = 739;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 735;
	            this.match(AMOSParser.HEX_NUMBER);
	            this.state = 736;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 737;
	            this.expression1();
	            break;

	        case 3:
	            this.state = 738;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        }
	        this.state = 741;
	        this.match(AMOSParser.COMMA);
	        this.state = 742;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wait_key_break() {
	    let localctx = new Wait_key_breakContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, AMOSParser.RULE_wait_key_break);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 744;
	        this.match(AMOSParser.WAITKEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_starter() {
	    let localctx = new Variable_starterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, AMOSParser.RULE_variable_starter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 746;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 747;
	        this.match(AMOSParser.T__29);
	        this.state = 751;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 68:
	        case 69:
	        case 75:
	        case 102:
	        case 104:
	        case 110:
	        case 114:
	            this.state = 748;
	            this.expression1();
	            break;
	        case 44:
	            this.state = 749;
	            this.btst();
	            break;
	        case 70:
	            this.state = 750;
	            this.match(AMOSParser.T__69);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_starter() {
	    let localctx = new Function_starterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, AMOSParser.RULE_function_starter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 753;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 754;
	        this.match(AMOSParser.BRACKETOPEN_ARRAY);
	        this.state = 755;
	        _la = this._input.LA(1);
	        if(!(_la===75 || _la===102)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 756;
	        this.match(AMOSParser.BRACKETCLOSE_ARRAY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call_or_array_access() {
	    let localctx = new Function_call_or_array_accessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, AMOSParser.RULE_function_call_or_array_access);
	    var _la = 0;
	    try {
	        this.state = 779;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 758;
	            this.match(AMOSParser.IDENTIFIER);
	            this.state = 759;
	            this.match(AMOSParser.BRACKETOPEN_ARRAY);
	            this.state = 760;
	            this.expression1();
	            this.state = 761;
	            this.match(AMOSParser.BRACKETCLOSE_ARRAY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 763;
	            this.match(AMOSParser.IDENTIFIER);
	            this.state = 764;
	            this.match(AMOSParser.BRACKETOPEN_PROP);
	            this.state = 766;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2 || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 131) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 4357) !== 0)) {
	                this.state = 765;
	                this.expression1();
	            }

	            this.state = 772;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===78) {
	                this.state = 768;
	                this.match(AMOSParser.COMMA);
	                this.state = 769;
	                this.expression1();
	                this.state = 774;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 775;
	            this.match(AMOSParser.BRACKETCLOSE_PROP);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 776;
	            this.match(AMOSParser.IDENTIFIER);
	            this.state = 777;
	            this.match(AMOSParser.BRACKETOPEN_PROP);
	            this.state = 778;
	            this.match(AMOSParser.BRACKETCLOSE_PROP);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_structure() {
	    let localctx = new Array_structureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, AMOSParser.RULE_array_structure);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 781;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 782;
	        this.match(AMOSParser.BRACKETOPEN_PROP);

	        this.state = 785;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 783;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 784;
	            this.expression1();
	            break;

	        }
	        this.state = 788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 787;
	            this.match(AMOSParser.COMMA);
	        }

	        this.state = 792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        if(la_===1) {
	            this.state = 790;
	            this.match(AMOSParser.NUMBER);

	        } else if(la_===2) {
	            this.state = 791;
	            this.expression1();

	        }
	        this.state = 794;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_create() {
	    let localctx = new Array_createContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, AMOSParser.RULE_array_create);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 796;
	        this.match(AMOSParser.T__70);
	        this.state = 797;
	        this.array_structure();
	        this.state = 804;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 799;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===78) {
	                    this.state = 798;
	                    this.match(AMOSParser.COMMA);
	                }

	                this.state = 801;
	                this.array_structure(); 
	            }
	            this.state = 806;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_update() {
	    let localctx = new Array_updateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, AMOSParser.RULE_array_update);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 808;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 812;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 809;
	            this.match(AMOSParser.NUMBER);
	            break;

	        case 2:
	            this.state = 810;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 3:
	            this.state = 811;
	            this.expression1();
	            break;

	        }
	        this.state = 814;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	        this.state = 815;
	        this.match(AMOSParser.T__29);
	        this.state = 816;
	        this.expression1();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	screen_open() {
	    let localctx = new Screen_openContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, AMOSParser.RULE_screen_open);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 818;
	        this.match(AMOSParser.SCREENOPEN);
	        this.state = 819;
	        this.match(AMOSParser.NUMBER);
	        this.state = 820;
	        this.match(AMOSParser.COMMA);
	        this.state = 821;
	        this.match(AMOSParser.NUMBER);
	        this.state = 822;
	        this.match(AMOSParser.COMMA);
	        this.state = 823;
	        this.match(AMOSParser.NUMBER);
	        this.state = 824;
	        this.match(AMOSParser.COMMA);
	        this.state = 825;
	        this.match(AMOSParser.NUMBER);
	        this.state = 826;
	        this.match(AMOSParser.COMMA);
	        this.state = 827;
	        _la = this._input.LA(1);
	        if(!(_la===76 || _la===77)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	curs_off() {
	    let localctx = new Curs_offContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, AMOSParser.RULE_curs_off);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 829;
	        this.match(AMOSParser.CURSOFF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	curs_on() {
	    let localctx = new Curs_onContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, AMOSParser.RULE_curs_on);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 831;
	        this.match(AMOSParser.CURSON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ink() {
	    let localctx = new InkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, AMOSParser.RULE_ink);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 833;
	        this.match(AMOSParser.INK);
	        this.state = 834;
	        this.match(AMOSParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	text() {
	    let localctx = new TextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, AMOSParser.RULE_text);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 836;
	        this.match(AMOSParser.TEXT);
	        this.state = 837;
	        this.match(AMOSParser.NUMBER);
	        this.state = 838;
	        this.match(AMOSParser.COMMA);
	        this.state = 839;
	        this.match(AMOSParser.NUMBER);
	        this.state = 840;
	        this.match(AMOSParser.COMMA);
	        this.state = 841;
	        _la = this._input.LA(1);
	        if(!(_la===85 || _la===102)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_loop() {
	    let localctx = new Do_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, AMOSParser.RULE_do_loop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 843;
	        this.match(AMOSParser.DO);
	        this.state = 847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 951515050) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 532212857) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 3063069709) !== 0) || _la===115) {
	            this.state = 844;
	            this.statement();
	            this.state = 849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 850;
	        this.match(AMOSParser.LOOP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_wend() {
	    let localctx = new While_wendContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, AMOSParser.RULE_while_wend);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 852;
	        this.match(AMOSParser.WHILE);
	        this.state = 853;
	        this.current_Key_State();
	        this.state = 857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 951515050) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 532212857) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 3063069709) !== 0) || _la===115) {
	            this.state = 854;
	            this.statement();
	            this.state = 859;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 860;
	        this.match(AMOSParser.WEND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_loop() {
	    let localctx = new For_loopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, AMOSParser.RULE_for_loop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.match(AMOSParser.FOR);
	        this.state = 863;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 864;
	        this.match(AMOSParser.T__29);
	        this.state = 865;
	        this.expression1();
	        this.state = 866;
	        this.match(AMOSParser.TO);
	        this.state = 867;
	        this.expression1();
	        this.state = 871;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 951515050) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 532212857) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 3063069709) !== 0) || _la===115) {
	            this.state = 868;
	            this.statement();
	            this.state = 873;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 877;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 874;
	            this.match(AMOSParser.NEXT);
	            this.state = 875;
	            this.match(AMOSParser.IDENTIFIER);
	            break;

	        case 2:
	            this.state = 876;
	            this.match(AMOSParser.NEXT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement() {
	    let localctx = new If_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, AMOSParser.RULE_if_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 883;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 879;
	            this.match(AMOSParser.IF);
	            this.state = 880;
	            this.expression1();
	            break;

	        case 2:
	            this.state = 881;
	            this.match(AMOSParser.IF);
	            this.state = 882;
	            this.read_target();
	            break;

	        }
	        this.state = 885;
	        _la = this._input.LA(1);
	        if(!(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 63) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 886;
	        this.expression2();
	        this.state = 890;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 887;
	                this.statement(); 
	            }
	            this.state = 892;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
	        }

	        this.state = 897;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	            this.state = 893;
	            this.match(AMOSParser.T__0);
	            this.state = 894;
	            this.match(AMOSParser.T__71);
	            break;
	        case 92:
	            this.state = 895;
	            this.else_statement();
	            break;
	        case 93:
	            this.state = 896;
	            this.match(AMOSParser.ENDIF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	else_statement() {
	    let localctx = new Else_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, AMOSParser.RULE_else_statement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 899;
	        this.match(AMOSParser.ELSE);
	        this.state = 903;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 951515050) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 532212857) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 3063069709) !== 0) || _la===115) {
	            this.state = 900;
	            this.statement();
	            this.state = 905;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 906;
	        this.match(AMOSParser.ENDIF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement_key_state() {
	    let localctx = new If_statement_key_stateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, AMOSParser.RULE_if_statement_key_state);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this.match(AMOSParser.IF);
	        this.state = 909;
	        this.current_Key_State();
	        this.state = 913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 951515050) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 532212857) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 3063069709) !== 0) || _la===115) {
	            this.state = 910;
	            this.statement();
	            this.state = 915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 918;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 92:
	            this.state = 916;
	            this.else_statement();
	            break;
	        case 93:
	            this.state = 917;
	            this.match(AMOSParser.ENDIF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bar() {
	    let localctx = new BarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, AMOSParser.RULE_bar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 920;
	        this.match(AMOSParser.BAR);
	        this.state = 921;
	        this.expression1();
	        this.state = 922;
	        this.match(AMOSParser.COMMA);
	        this.state = 923;
	        this.expression2();
	        this.state = 924;
	        this.match(AMOSParser.TO);
	        this.state = 925;
	        this.expression1();
	        this.state = 926;
	        this.match(AMOSParser.COMMA);
	        this.state = 927;
	        this.expression2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure() {
	    let localctx = new ProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, AMOSParser.RULE_procedure);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        this.match(AMOSParser.PROC);
	        this.state = 930;
	        this.match(AMOSParser.IDENTIFIER);
	        this.state = 936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106) {
	            this.state = 931;
	            this.match(AMOSParser.BRACKETOPEN_ARRAY);
	            this.state = 933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===102) {
	                this.state = 932;
	                this.match(AMOSParser.IDENTIFIER);
	            }

	            this.state = 935;
	            this.match(AMOSParser.BRACKETCLOSE_ARRAY);
	        }

	        this.state = 941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 951515050) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 532212857) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 3063069709) !== 0) || _la===115) {
	            this.state = 938;
	            this.statement();
	            this.state = 943;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 944;
	        this.match(AMOSParser.ENDPROC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	current_Key_State() {
	    let localctx = new Current_Key_StateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, AMOSParser.RULE_current_Key_State);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.match(AMOSParser.KEYSTATE);
	        this.state = 947;
	        this.match(AMOSParser.BRACKETOPEN_PROP);
	        this.state = 948;
	        this.expression1();
	        this.state = 949;
	        this.match(AMOSParser.BRACKETCLOSE_PROP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	print_options() {
	    let localctx = new Print_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, AMOSParser.RULE_print_options);
	    try {
	        this.state = 955;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 68:
	        case 69:
	        case 75:
	        case 102:
	        case 104:
	        case 110:
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 951;
	            this.expression1();
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 952;
	            this.match(AMOSParser.STRING);
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 953;
	            this.match(AMOSParser.HASHTAG);
	            this.state = 954;
	            this.match(AMOSParser.NUMBER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	print_something() {
	    let localctx = new Print_somethingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, AMOSParser.RULE_print_something);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 957;
	        this.match(AMOSParser.T__72);
	        this.state = 958;
	        this.print_options();
	        this.state = 963;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 959;
	                _la = this._input.LA(1);
	                if(!(_la===78 || _la===116)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 960;
	                this.print_options(); 
	            }
	            this.state = 965;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

AMOSParser.EOF = antlr4.Token.EOF;
AMOSParser.T__0 = 1;
AMOSParser.T__1 = 2;
AMOSParser.T__2 = 3;
AMOSParser.T__3 = 4;
AMOSParser.T__4 = 5;
AMOSParser.T__5 = 6;
AMOSParser.T__6 = 7;
AMOSParser.T__7 = 8;
AMOSParser.T__8 = 9;
AMOSParser.T__9 = 10;
AMOSParser.T__10 = 11;
AMOSParser.T__11 = 12;
AMOSParser.T__12 = 13;
AMOSParser.T__13 = 14;
AMOSParser.T__14 = 15;
AMOSParser.T__15 = 16;
AMOSParser.T__16 = 17;
AMOSParser.T__17 = 18;
AMOSParser.T__18 = 19;
AMOSParser.T__19 = 20;
AMOSParser.T__20 = 21;
AMOSParser.T__21 = 22;
AMOSParser.T__22 = 23;
AMOSParser.T__23 = 24;
AMOSParser.T__24 = 25;
AMOSParser.T__25 = 26;
AMOSParser.T__26 = 27;
AMOSParser.T__27 = 28;
AMOSParser.T__28 = 29;
AMOSParser.T__29 = 30;
AMOSParser.T__30 = 31;
AMOSParser.T__31 = 32;
AMOSParser.T__32 = 33;
AMOSParser.T__33 = 34;
AMOSParser.T__34 = 35;
AMOSParser.T__35 = 36;
AMOSParser.T__36 = 37;
AMOSParser.T__37 = 38;
AMOSParser.T__38 = 39;
AMOSParser.T__39 = 40;
AMOSParser.T__40 = 41;
AMOSParser.T__41 = 42;
AMOSParser.T__42 = 43;
AMOSParser.T__43 = 44;
AMOSParser.T__44 = 45;
AMOSParser.T__45 = 46;
AMOSParser.T__46 = 47;
AMOSParser.T__47 = 48;
AMOSParser.T__48 = 49;
AMOSParser.T__49 = 50;
AMOSParser.T__50 = 51;
AMOSParser.T__51 = 52;
AMOSParser.T__52 = 53;
AMOSParser.T__53 = 54;
AMOSParser.T__54 = 55;
AMOSParser.T__55 = 56;
AMOSParser.T__56 = 57;
AMOSParser.T__57 = 58;
AMOSParser.T__58 = 59;
AMOSParser.T__59 = 60;
AMOSParser.T__60 = 61;
AMOSParser.T__61 = 62;
AMOSParser.T__62 = 63;
AMOSParser.T__63 = 64;
AMOSParser.T__64 = 65;
AMOSParser.T__65 = 66;
AMOSParser.T__66 = 67;
AMOSParser.T__67 = 68;
AMOSParser.T__68 = 69;
AMOSParser.T__69 = 70;
AMOSParser.T__70 = 71;
AMOSParser.T__71 = 72;
AMOSParser.T__72 = 73;
AMOSParser.SCREENOPEN = 74;
AMOSParser.NUMBER = 75;
AMOSParser.LOWRES = 76;
AMOSParser.HIRES = 77;
AMOSParser.COMMA = 78;
AMOSParser.COMMENT = 79;
AMOSParser.WS = 80;
AMOSParser.CURSOFF = 81;
AMOSParser.CURSON = 82;
AMOSParser.INK = 83;
AMOSParser.TEXT = 84;
AMOSParser.STRING = 85;
AMOSParser.DO = 86;
AMOSParser.LOOP = 87;
AMOSParser.FOR = 88;
AMOSParser.TO = 89;
AMOSParser.NEXT = 90;
AMOSParser.IF = 91;
AMOSParser.ELSE = 92;
AMOSParser.ENDIF = 93;
AMOSParser.WHILE = 94;
AMOSParser.WEND = 95;
AMOSParser.PLAY = 96;
AMOSParser.PROC = 97;
AMOSParser.ENDPROC = 98;
AMOSParser.BAR = 99;
AMOSParser.WAITKEY = 100;
AMOSParser.KEYSTATE = 101;
AMOSParser.IDENTIFIER = 102;
AMOSParser.COMPARISON = 103;
AMOSParser.BRACKETOPEN_PROP = 104;
AMOSParser.BRACKETCLOSE_PROP = 105;
AMOSParser.BRACKETOPEN_ARRAY = 106;
AMOSParser.BRACKETCLOSE_ARRAY = 107;
AMOSParser.BRACKETOPEN_FUNCTION = 108;
AMOSParser.BRACKETCLOSE_FUNCTION = 109;
AMOSParser.HEX_NUMBER = 110;
AMOSParser.MULTIPLY = 111;
AMOSParser.DIVIDE = 112;
AMOSParser.ADD = 113;
AMOSParser.SUBTRACT = 114;
AMOSParser.STATEMENT_SEPARATOR = 115;
AMOSParser.FINISH_AND_ADD_OTHER_STATEMENT = 116;
AMOSParser.DOT = 117;
AMOSParser.HASHTAG = 118;
AMOSParser.PERCENT = 119;
AMOSParser.QUESTION = 120;

AMOSParser.RULE_expression2 = 0;
AMOSParser.RULE_expression1 = 1;
AMOSParser.RULE_term = 2;
AMOSParser.RULE_array_index_get = 3;
AMOSParser.RULE_factor = 4;
AMOSParser.RULE_program = 5;
AMOSParser.RULE_statement = 6;
AMOSParser.RULE_rndFunction = 7;
AMOSParser.RULE_screen_swap = 8;
AMOSParser.RULE_wait_vbl = 9;
AMOSParser.RULE_wait_key = 10;
AMOSParser.RULE_box = 11;
AMOSParser.RULE_circle = 12;
AMOSParser.RULE_on_gosub = 13;
AMOSParser.RULE_screen_offset = 14;
AMOSParser.RULE_choose_Screen = 15;
AMOSParser.RULE_data_statement = 16;
AMOSParser.RULE_read_statement = 17;
AMOSParser.RULE_read_target = 18;
AMOSParser.RULE_goto_label = 19;
AMOSParser.RULE_gosub = 20;
AMOSParser.RULE_bob_update_on = 21;
AMOSParser.RULE_clear_key = 22;
AMOSParser.RULE_bob_off = 23;
AMOSParser.RULE_value = 24;
AMOSParser.RULE_set_rainbow = 25;
AMOSParser.RULE_use_rainbow = 26;
AMOSParser.RULE_label_title = 27;
AMOSParser.RULE_key_speed = 28;
AMOSParser.RULE_sam_loop = 29;
AMOSParser.RULE_sam_bank = 30;
AMOSParser.RULE_led_off = 31;
AMOSParser.RULE_loadBank = 32;
AMOSParser.RULE_loadBankImgToSprite = 33;
AMOSParser.RULE_expressions_comparators = 34;
AMOSParser.RULE_or_and = 35;
AMOSParser.RULE_if_then = 36;
AMOSParser.RULE_open_out_readfile = 37;
AMOSParser.RULE_open_in_writefile = 38;
AMOSParser.RULE_close_file = 39;
AMOSParser.RULE_input_variable = 40;
AMOSParser.RULE_btst = 41;
AMOSParser.RULE_repeat_key = 42;
AMOSParser.RULE_set_buffer = 43;
AMOSParser.RULE_global = 44;
AMOSParser.RULE_turbo_draw = 45;
AMOSParser.RULE_locate = 46;
AMOSParser.RULE_add = 47;
AMOSParser.RULE_blitter_copy = 48;
AMOSParser.RULE_blitter_fill = 49;
AMOSParser.RULE_blitter_clear = 50;
AMOSParser.RULE_autoback = 51;
AMOSParser.RULE_palette = 52;
AMOSParser.RULE_double_buffer = 53;
AMOSParser.RULE_pen = 54;
AMOSParser.RULE_cls = 55;
AMOSParser.RULE_paper = 56;
AMOSParser.RULE_degree = 57;
AMOSParser.RULE_hide = 58;
AMOSParser.RULE_flash_off = 59;
AMOSParser.RULE_flash_on = 60;
AMOSParser.RULE_sin_function = 61;
AMOSParser.RULE_cos_function = 62;
AMOSParser.RULE_play_sound = 63;
AMOSParser.RULE_wait_key_break = 64;
AMOSParser.RULE_variable_starter = 65;
AMOSParser.RULE_function_starter = 66;
AMOSParser.RULE_function_call_or_array_access = 67;
AMOSParser.RULE_array_structure = 68;
AMOSParser.RULE_array_create = 69;
AMOSParser.RULE_array_update = 70;
AMOSParser.RULE_screen_open = 71;
AMOSParser.RULE_curs_off = 72;
AMOSParser.RULE_curs_on = 73;
AMOSParser.RULE_ink = 74;
AMOSParser.RULE_text = 75;
AMOSParser.RULE_do_loop = 76;
AMOSParser.RULE_while_wend = 77;
AMOSParser.RULE_for_loop = 78;
AMOSParser.RULE_if_statement = 79;
AMOSParser.RULE_else_statement = 80;
AMOSParser.RULE_if_statement_key_state = 81;
AMOSParser.RULE_bar = 82;
AMOSParser.RULE_procedure = 83;
AMOSParser.RULE_current_Key_State = 84;
AMOSParser.RULE_print_options = 85;
AMOSParser.RULE_print_something = 86;

class Expression2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_expression2;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.ADD);
	    } else {
	        return this.getToken(AMOSParser.ADD, i);
	    }
	};


	SUBTRACT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.SUBTRACT);
	    } else {
	        return this.getToken(AMOSParser.SUBTRACT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterExpression2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitExpression2(this);
		}
	}


}



class Expression1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_expression1;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.ADD);
	    } else {
	        return this.getToken(AMOSParser.ADD, i);
	    }
	};


	SUBTRACT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.SUBTRACT);
	    } else {
	        return this.getToken(AMOSParser.SUBTRACT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterExpression1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitExpression1(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_term;
    }

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	SUBTRACT() {
	    return this.getToken(AMOSParser.SUBTRACT, 0);
	};

	MULTIPLY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.MULTIPLY);
	    } else {
	        return this.getToken(AMOSParser.MULTIPLY, i);
	    }
	};


	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.DIVIDE);
	    } else {
	        return this.getToken(AMOSParser.DIVIDE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitTerm(this);
		}
	}


}



class Array_index_getContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_array_index_get;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterArray_index_get(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitArray_index_get(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_factor;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	array_index_get() {
	    return this.getTypedRuleContext(Array_index_getContext,0);
	};

	sin_function() {
	    return this.getTypedRuleContext(Sin_functionContext,0);
	};

	cos_function() {
	    return this.getTypedRuleContext(Cos_functionContext,0);
	};

	rndFunction() {
	    return this.getTypedRuleContext(RndFunctionContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(AMOSParser.HEX_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFactor(this);
		}
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_program;
    }

	EOF() {
	    return this.getToken(AMOSParser.EOF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitProgram(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_statement;
    }

	procedure() {
	    return this.getTypedRuleContext(ProcedureContext,0);
	};

	screen_open() {
	    return this.getTypedRuleContext(Screen_openContext,0);
	};

	curs_off() {
	    return this.getTypedRuleContext(Curs_offContext,0);
	};

	array_update() {
	    return this.getTypedRuleContext(Array_updateContext,0);
	};

	curs_on() {
	    return this.getTypedRuleContext(Curs_onContext,0);
	};

	ink() {
	    return this.getTypedRuleContext(InkContext,0);
	};

	text() {
	    return this.getTypedRuleContext(TextContext,0);
	};

	do_loop() {
	    return this.getTypedRuleContext(Do_loopContext,0);
	};

	for_loop() {
	    return this.getTypedRuleContext(For_loopContext,0);
	};

	if_then() {
	    return this.getTypedRuleContext(If_thenContext,0);
	};

	if_statement_key_state() {
	    return this.getTypedRuleContext(If_statement_key_stateContext,0);
	};

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	function_starter() {
	    return this.getTypedRuleContext(Function_starterContext,0);
	};

	bar() {
	    return this.getTypedRuleContext(BarContext,0);
	};

	function_call_or_array_access() {
	    return this.getTypedRuleContext(Function_call_or_array_accessContext,0);
	};

	variable_starter() {
	    return this.getTypedRuleContext(Variable_starterContext,0);
	};

	while_wend() {
	    return this.getTypedRuleContext(While_wendContext,0);
	};

	wait_key_break() {
	    return this.getTypedRuleContext(Wait_key_breakContext,0);
	};

	play_sound() {
	    return this.getTypedRuleContext(Play_soundContext,0);
	};

	STATEMENT_SEPARATOR() {
	    return this.getToken(AMOSParser.STATEMENT_SEPARATOR, 0);
	};

	array_create() {
	    return this.getTypedRuleContext(Array_createContext,0);
	};

	print_something() {
	    return this.getTypedRuleContext(Print_somethingContext,0);
	};

	flash_off() {
	    return this.getTypedRuleContext(Flash_offContext,0);
	};

	flash_on() {
	    return this.getTypedRuleContext(Flash_onContext,0);
	};

	hide() {
	    return this.getTypedRuleContext(HideContext,0);
	};

	degree() {
	    return this.getTypedRuleContext(DegreeContext,0);
	};

	paper() {
	    return this.getTypedRuleContext(PaperContext,0);
	};

	cls() {
	    return this.getTypedRuleContext(ClsContext,0);
	};

	palette() {
	    return this.getTypedRuleContext(PaletteContext,0);
	};

	pen() {
	    return this.getTypedRuleContext(PenContext,0);
	};

	double_buffer() {
	    return this.getTypedRuleContext(Double_bufferContext,0);
	};

	autoback() {
	    return this.getTypedRuleContext(AutobackContext,0);
	};

	blitter_copy() {
	    return this.getTypedRuleContext(Blitter_copyContext,0);
	};

	blitter_fill() {
	    return this.getTypedRuleContext(Blitter_fillContext,0);
	};

	blitter_clear() {
	    return this.getTypedRuleContext(Blitter_clearContext,0);
	};

	add() {
	    return this.getTypedRuleContext(AddContext,0);
	};

	locate() {
	    return this.getTypedRuleContext(LocateContext,0);
	};

	turbo_draw() {
	    return this.getTypedRuleContext(Turbo_drawContext,0);
	};

	global() {
	    return this.getTypedRuleContext(GlobalContext,0);
	};

	set_buffer() {
	    return this.getTypedRuleContext(Set_bufferContext,0);
	};

	repeat_key() {
	    return this.getTypedRuleContext(Repeat_keyContext,0);
	};

	btst() {
	    return this.getTypedRuleContext(BtstContext,0);
	};

	open_out_readfile() {
	    return this.getTypedRuleContext(Open_out_readfileContext,0);
	};

	close_file() {
	    return this.getTypedRuleContext(Close_fileContext,0);
	};

	open_in_writefile() {
	    return this.getTypedRuleContext(Open_in_writefileContext,0);
	};

	input_variable() {
	    return this.getTypedRuleContext(Input_variableContext,0);
	};

	loadBank() {
	    return this.getTypedRuleContext(LoadBankContext,0);
	};

	loadBankImgToSprite() {
	    return this.getTypedRuleContext(LoadBankImgToSpriteContext,0);
	};

	led_off() {
	    return this.getTypedRuleContext(Led_offContext,0);
	};

	sam_bank() {
	    return this.getTypedRuleContext(Sam_bankContext,0);
	};

	sam_loop() {
	    return this.getTypedRuleContext(Sam_loopContext,0);
	};

	key_speed() {
	    return this.getTypedRuleContext(Key_speedContext,0);
	};

	label_title() {
	    return this.getTypedRuleContext(Label_titleContext,0);
	};

	set_rainbow() {
	    return this.getTypedRuleContext(Set_rainbowContext,0);
	};

	use_rainbow() {
	    return this.getTypedRuleContext(Use_rainbowContext,0);
	};

	bob_off() {
	    return this.getTypedRuleContext(Bob_offContext,0);
	};

	clear_key() {
	    return this.getTypedRuleContext(Clear_keyContext,0);
	};

	bob_update_on() {
	    return this.getTypedRuleContext(Bob_update_onContext,0);
	};

	gosub() {
	    return this.getTypedRuleContext(GosubContext,0);
	};

	goto_label() {
	    return this.getTypedRuleContext(Goto_labelContext,0);
	};

	screen_offset() {
	    return this.getTypedRuleContext(Screen_offsetContext,0);
	};

	choose_Screen() {
	    return this.getTypedRuleContext(Choose_ScreenContext,0);
	};

	on_gosub() {
	    return this.getTypedRuleContext(On_gosubContext,0);
	};

	data_statement() {
	    return this.getTypedRuleContext(Data_statementContext,0);
	};

	read_statement() {
	    return this.getTypedRuleContext(Read_statementContext,0);
	};

	box() {
	    return this.getTypedRuleContext(BoxContext,0);
	};

	circle() {
	    return this.getTypedRuleContext(CircleContext,0);
	};

	wait_vbl() {
	    return this.getTypedRuleContext(Wait_vblContext,0);
	};

	wait_key() {
	    return this.getTypedRuleContext(Wait_keyContext,0);
	};

	screen_swap() {
	    return this.getTypedRuleContext(Screen_swapContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitStatement(this);
		}
	}


}



class RndFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_rndFunction;
    }

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterRndFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitRndFunction(this);
		}
	}


}



class Screen_swapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_screen_swap;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterScreen_swap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitScreen_swap(this);
		}
	}


}



class Wait_vblContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_wait_vbl;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterWait_vbl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitWait_vbl(this);
		}
	}


}



class Wait_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_wait_key;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterWait_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitWait_key(this);
		}
	}


}



class BoxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_box;
    }

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBox(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBox(this);
		}
	}


}



class CircleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_circle;
    }

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCircle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCircle(this);
		}
	}


}



class On_gosubContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_on_gosub;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterOn_gosub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitOn_gosub(this);
		}
	}


}



class Screen_offsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_screen_offset;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterScreen_offset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitScreen_offset(this);
		}
	}


}



class Choose_ScreenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_choose_Screen;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterChoose_Screen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitChoose_Screen(this);
		}
	}


}



class Data_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_data_statement;
    }

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterData_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitData_statement(this);
		}
	}


}



class Read_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_read_statement;
    }

	read_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Read_targetContext);
	    } else {
	        return this.getTypedRuleContext(Read_targetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterRead_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitRead_statement(this);
		}
	}


}



class Read_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_read_target;
    }

	array_structure() {
	    return this.getTypedRuleContext(Array_structureContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterRead_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitRead_target(this);
		}
	}


}



class Goto_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_goto_label;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterGoto_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitGoto_label(this);
		}
	}


}



class GosubContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_gosub;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterGosub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitGosub(this);
		}
	}


}



class Bob_update_onContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_bob_update_on;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBob_update_on(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBob_update_on(this);
		}
	}


}



class Clear_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_clear_key;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterClear_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitClear_key(this);
		}
	}


}



class Bob_offContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_bob_off;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBob_off(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBob_off(this);
		}
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_value;
    }

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	STRING() {
	    return this.getToken(AMOSParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitValue(this);
		}
	}


}



class Set_rainbowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_set_rainbow;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.STRING);
	    } else {
	        return this.getToken(AMOSParser.STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSet_rainbow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSet_rainbow(this);
		}
	}


}



class Use_rainbowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_use_rainbow;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.STRING);
	    } else {
	        return this.getToken(AMOSParser.STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterUse_rainbow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitUse_rainbow(this);
		}
	}


}



class Label_titleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_label_title;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	STATEMENT_SEPARATOR() {
	    return this.getToken(AMOSParser.STATEMENT_SEPARATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLabel_title(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLabel_title(this);
		}
	}


}



class Key_speedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_key_speed;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterKey_speed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitKey_speed(this);
		}
	}


}



class Sam_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_sam_loop;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSam_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSam_loop(this);
		}
	}


}



class Sam_bankContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_sam_bank;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSam_bank(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSam_bank(this);
		}
	}


}



class Led_offContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_led_off;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLed_off(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLed_off(this);
		}
	}


}



class LoadBankContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_loadBank;
    }

	STRING() {
	    return this.getToken(AMOSParser.STRING, 0);
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLoadBank(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLoadBank(this);
		}
	}


}



class LoadBankImgToSpriteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_loadBankImgToSprite;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLoadBankImgToSprite(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLoadBankImgToSprite(this);
		}
	}


}



class Expressions_comparatorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_expressions_comparators;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterExpressions_comparators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitExpressions_comparators(this);
		}
	}


}



class Or_andContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_or_and;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterOr_and(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitOr_and(this);
		}
	}


}



class If_thenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_if_then;
    }

	IF() {
	    return this.getToken(AMOSParser.IF, 0);
	};

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	expression2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression2Context);
	    } else {
	        return this.getTypedRuleContext(Expression2Context,i);
	    }
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressions_comparators = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expressions_comparatorsContext);
	    } else {
	        return this.getTypedRuleContext(Expressions_comparatorsContext,i);
	    }
	};

	or_and() {
	    return this.getTypedRuleContext(Or_andContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterIf_then(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitIf_then(this);
		}
	}


}



class Open_out_readfileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_open_out_readfile;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterOpen_out_readfile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitOpen_out_readfile(this);
		}
	}


}



class Open_in_writefileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_open_in_writefile;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterOpen_in_writefile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitOpen_in_writefile(this);
		}
	}


}



class Close_fileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_close_file;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterClose_file(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitClose_file(this);
		}
	}


}



class Input_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_input_variable;
    }

	HASHTAG() {
	    return this.getToken(AMOSParser.HASHTAG, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(AMOSParser.HEX_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterInput_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitInput_variable(this);
		}
	}


}



class BtstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_btst;
    }

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBtst(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBtst(this);
		}
	}


}



class Repeat_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_repeat_key;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterRepeat_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitRepeat_key(this);
		}
	}


}



class Set_bufferContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_set_buffer;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSet_buffer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSet_buffer(this);
		}
	}


}



class GlobalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_global;
    }

	array_structure = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_structureContext);
	    } else {
	        return this.getTypedRuleContext(Array_structureContext,i);
	    }
	};

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterGlobal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitGlobal(this);
		}
	}


}



class Turbo_drawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_turbo_draw;
    }

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterTurbo_draw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitTurbo_draw(this);
		}
	}


}



class LocateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_locate;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterLocate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitLocate(this);
		}
	}


}



class AddContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_add;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterAdd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitAdd(this);
		}
	}


}



class Blitter_copyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_blitter_copy;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBlitter_copy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBlitter_copy(this);
		}
	}


}



class Blitter_fillContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_blitter_fill;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBlitter_fill(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBlitter_fill(this);
		}
	}


}



class Blitter_clearContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_blitter_clear;
    }

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBlitter_clear(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBlitter_clear(this);
		}
	}


}



class AutobackContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_autoback;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterAutoback(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitAutoback(this);
		}
	}


}



class PaletteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_palette;
    }

	HEX_NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.HEX_NUMBER);
	    } else {
	        return this.getToken(AMOSParser.HEX_NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPalette(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPalette(this);
		}
	}


}



class Double_bufferContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_double_buffer;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterDouble_buffer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitDouble_buffer(this);
		}
	}


}



class PenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_pen;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPen(this);
		}
	}


}



class ClsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_cls;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCls(this);
		}
	}


}



class PaperContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_paper;
    }

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPaper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPaper(this);
		}
	}


}



class DegreeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_degree;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterDegree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitDegree(this);
		}
	}


}



class HideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_hide;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterHide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitHide(this);
		}
	}


}



class Flash_offContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_flash_off;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFlash_off(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFlash_off(this);
		}
	}


}



class Flash_onContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_flash_on;
    }


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFlash_on(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFlash_on(this);
		}
	}


}



class Sin_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_sin_function;
    }

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterSin_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitSin_function(this);
		}
	}


}



class Cos_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_cos_function;
    }

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCos_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCos_function(this);
		}
	}


}



class Play_soundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_play_sound;
    }

	PLAY() {
	    return this.getToken(AMOSParser.PLAY, 0);
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(AMOSParser.HEX_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPlay_sound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPlay_sound(this);
		}
	}


}



class Wait_key_breakContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_wait_key_break;
    }

	WAITKEY() {
	    return this.getToken(AMOSParser.WAITKEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterWait_key_break(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitWait_key_break(this);
		}
	}


}



class Variable_starterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_variable_starter;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	btst() {
	    return this.getTypedRuleContext(BtstContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterVariable_starter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitVariable_starter(this);
		}
	}


}



class Function_starterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_function_starter;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	BRACKETOPEN_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETOPEN_ARRAY, 0);
	};

	BRACKETCLOSE_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_ARRAY, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFunction_starter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFunction_starter(this);
		}
	}


}



class Function_call_or_array_accessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_function_call_or_array_access;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	BRACKETOPEN_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETOPEN_ARRAY, 0);
	};

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	BRACKETCLOSE_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_ARRAY, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFunction_call_or_array_access(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFunction_call_or_array_access(this);
		}
	}


}



class Array_structureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_array_structure;
    }

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA() {
	    return this.getToken(AMOSParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterArray_structure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitArray_structure(this);
		}
	}


}



class Array_createContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_array_create;
    }

	array_structure = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_structureContext);
	    } else {
	        return this.getTypedRuleContext(Array_structureContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterArray_create(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitArray_create(this);
		}
	}


}



class Array_updateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_array_update;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterArray_update(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitArray_update(this);
		}
	}


}



class Screen_openContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_screen_open;
    }

	SCREENOPEN() {
	    return this.getToken(AMOSParser.SCREENOPEN, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	LOWRES() {
	    return this.getToken(AMOSParser.LOWRES, 0);
	};

	HIRES() {
	    return this.getToken(AMOSParser.HIRES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterScreen_open(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitScreen_open(this);
		}
	}


}



class Curs_offContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_curs_off;
    }

	CURSOFF() {
	    return this.getToken(AMOSParser.CURSOFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCurs_off(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCurs_off(this);
		}
	}


}



class Curs_onContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_curs_on;
    }

	CURSON() {
	    return this.getToken(AMOSParser.CURSON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCurs_on(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCurs_on(this);
		}
	}


}



class InkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_ink;
    }

	INK() {
	    return this.getToken(AMOSParser.INK, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterInk(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitInk(this);
		}
	}


}



class TextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_text;
    }

	TEXT() {
	    return this.getToken(AMOSParser.TEXT, 0);
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.NUMBER);
	    } else {
	        return this.getToken(AMOSParser.NUMBER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	STRING() {
	    return this.getToken(AMOSParser.STRING, 0);
	};

	IDENTIFIER() {
	    return this.getToken(AMOSParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitText(this);
		}
	}


}



class Do_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_do_loop;
    }

	DO() {
	    return this.getToken(AMOSParser.DO, 0);
	};

	LOOP() {
	    return this.getToken(AMOSParser.LOOP, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterDo_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitDo_loop(this);
		}
	}


}



class While_wendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_while_wend;
    }

	WHILE() {
	    return this.getToken(AMOSParser.WHILE, 0);
	};

	current_Key_State() {
	    return this.getTypedRuleContext(Current_Key_StateContext,0);
	};

	WEND() {
	    return this.getToken(AMOSParser.WEND, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterWhile_wend(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitWhile_wend(this);
		}
	}


}



class For_loopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_for_loop;
    }

	FOR() {
	    return this.getToken(AMOSParser.FOR, 0);
	};

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	NEXT() {
	    return this.getToken(AMOSParser.NEXT, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterFor_loop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitFor_loop(this);
		}
	}


}



class If_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_if_statement;
    }

	expression2() {
	    return this.getTypedRuleContext(Expression2Context,0);
	};

	IF() {
	    return this.getToken(AMOSParser.IF, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	read_target() {
	    return this.getTypedRuleContext(Read_targetContext,0);
	};

	else_statement() {
	    return this.getTypedRuleContext(Else_statementContext,0);
	};

	ENDIF() {
	    return this.getToken(AMOSParser.ENDIF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterIf_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitIf_statement(this);
		}
	}


}



class Else_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_else_statement;
    }

	ELSE() {
	    return this.getToken(AMOSParser.ELSE, 0);
	};

	ENDIF() {
	    return this.getToken(AMOSParser.ENDIF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterElse_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitElse_statement(this);
		}
	}


}



class If_statement_key_stateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_if_statement_key_state;
    }

	IF() {
	    return this.getToken(AMOSParser.IF, 0);
	};

	current_Key_State() {
	    return this.getTypedRuleContext(Current_Key_StateContext,0);
	};

	else_statement() {
	    return this.getTypedRuleContext(Else_statementContext,0);
	};

	ENDIF() {
	    return this.getToken(AMOSParser.ENDIF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterIf_statement_key_state(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitIf_statement_key_state(this);
		}
	}


}



class BarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_bar;
    }

	BAR() {
	    return this.getToken(AMOSParser.BAR, 0);
	};

	expression1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression1Context);
	    } else {
	        return this.getTypedRuleContext(Expression1Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	expression2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression2Context);
	    } else {
	        return this.getTypedRuleContext(Expression2Context,i);
	    }
	};

	TO() {
	    return this.getToken(AMOSParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterBar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitBar(this);
		}
	}


}



class ProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_procedure;
    }

	PROC() {
	    return this.getToken(AMOSParser.PROC, 0);
	};

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.IDENTIFIER);
	    } else {
	        return this.getToken(AMOSParser.IDENTIFIER, i);
	    }
	};


	ENDPROC() {
	    return this.getToken(AMOSParser.ENDPROC, 0);
	};

	BRACKETOPEN_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETOPEN_ARRAY, 0);
	};

	BRACKETCLOSE_ARRAY() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_ARRAY, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitProcedure(this);
		}
	}


}



class Current_Key_StateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_current_Key_State;
    }

	KEYSTATE() {
	    return this.getToken(AMOSParser.KEYSTATE, 0);
	};

	BRACKETOPEN_PROP() {
	    return this.getToken(AMOSParser.BRACKETOPEN_PROP, 0);
	};

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	BRACKETCLOSE_PROP() {
	    return this.getToken(AMOSParser.BRACKETCLOSE_PROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterCurrent_Key_State(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitCurrent_Key_State(this);
		}
	}


}



class Print_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_print_options;
    }

	expression1() {
	    return this.getTypedRuleContext(Expression1Context,0);
	};

	STRING() {
	    return this.getToken(AMOSParser.STRING, 0);
	};

	HASHTAG() {
	    return this.getToken(AMOSParser.HASHTAG, 0);
	};

	NUMBER() {
	    return this.getToken(AMOSParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPrint_options(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPrint_options(this);
		}
	}


}



class Print_somethingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AMOSParser.RULE_print_something;
    }

	print_options = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Print_optionsContext);
	    } else {
	        return this.getTypedRuleContext(Print_optionsContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.COMMA);
	    } else {
	        return this.getToken(AMOSParser.COMMA, i);
	    }
	};


	FINISH_AND_ADD_OTHER_STATEMENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AMOSParser.FINISH_AND_ADD_OTHER_STATEMENT);
	    } else {
	        return this.getToken(AMOSParser.FINISH_AND_ADD_OTHER_STATEMENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.enterPrint_something(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AMOSListener ) {
	        listener.exitPrint_something(this);
		}
	}


}




AMOSParser.Expression2Context = Expression2Context; 
AMOSParser.Expression1Context = Expression1Context; 
AMOSParser.TermContext = TermContext; 
AMOSParser.Array_index_getContext = Array_index_getContext; 
AMOSParser.FactorContext = FactorContext; 
AMOSParser.ProgramContext = ProgramContext; 
AMOSParser.StatementContext = StatementContext; 
AMOSParser.RndFunctionContext = RndFunctionContext; 
AMOSParser.Screen_swapContext = Screen_swapContext; 
AMOSParser.Wait_vblContext = Wait_vblContext; 
AMOSParser.Wait_keyContext = Wait_keyContext; 
AMOSParser.BoxContext = BoxContext; 
AMOSParser.CircleContext = CircleContext; 
AMOSParser.On_gosubContext = On_gosubContext; 
AMOSParser.Screen_offsetContext = Screen_offsetContext; 
AMOSParser.Choose_ScreenContext = Choose_ScreenContext; 
AMOSParser.Data_statementContext = Data_statementContext; 
AMOSParser.Read_statementContext = Read_statementContext; 
AMOSParser.Read_targetContext = Read_targetContext; 
AMOSParser.Goto_labelContext = Goto_labelContext; 
AMOSParser.GosubContext = GosubContext; 
AMOSParser.Bob_update_onContext = Bob_update_onContext; 
AMOSParser.Clear_keyContext = Clear_keyContext; 
AMOSParser.Bob_offContext = Bob_offContext; 
AMOSParser.ValueContext = ValueContext; 
AMOSParser.Set_rainbowContext = Set_rainbowContext; 
AMOSParser.Use_rainbowContext = Use_rainbowContext; 
AMOSParser.Label_titleContext = Label_titleContext; 
AMOSParser.Key_speedContext = Key_speedContext; 
AMOSParser.Sam_loopContext = Sam_loopContext; 
AMOSParser.Sam_bankContext = Sam_bankContext; 
AMOSParser.Led_offContext = Led_offContext; 
AMOSParser.LoadBankContext = LoadBankContext; 
AMOSParser.LoadBankImgToSpriteContext = LoadBankImgToSpriteContext; 
AMOSParser.Expressions_comparatorsContext = Expressions_comparatorsContext; 
AMOSParser.Or_andContext = Or_andContext; 
AMOSParser.If_thenContext = If_thenContext; 
AMOSParser.Open_out_readfileContext = Open_out_readfileContext; 
AMOSParser.Open_in_writefileContext = Open_in_writefileContext; 
AMOSParser.Close_fileContext = Close_fileContext; 
AMOSParser.Input_variableContext = Input_variableContext; 
AMOSParser.BtstContext = BtstContext; 
AMOSParser.Repeat_keyContext = Repeat_keyContext; 
AMOSParser.Set_bufferContext = Set_bufferContext; 
AMOSParser.GlobalContext = GlobalContext; 
AMOSParser.Turbo_drawContext = Turbo_drawContext; 
AMOSParser.LocateContext = LocateContext; 
AMOSParser.AddContext = AddContext; 
AMOSParser.Blitter_copyContext = Blitter_copyContext; 
AMOSParser.Blitter_fillContext = Blitter_fillContext; 
AMOSParser.Blitter_clearContext = Blitter_clearContext; 
AMOSParser.AutobackContext = AutobackContext; 
AMOSParser.PaletteContext = PaletteContext; 
AMOSParser.Double_bufferContext = Double_bufferContext; 
AMOSParser.PenContext = PenContext; 
AMOSParser.ClsContext = ClsContext; 
AMOSParser.PaperContext = PaperContext; 
AMOSParser.DegreeContext = DegreeContext; 
AMOSParser.HideContext = HideContext; 
AMOSParser.Flash_offContext = Flash_offContext; 
AMOSParser.Flash_onContext = Flash_onContext; 
AMOSParser.Sin_functionContext = Sin_functionContext; 
AMOSParser.Cos_functionContext = Cos_functionContext; 
AMOSParser.Play_soundContext = Play_soundContext; 
AMOSParser.Wait_key_breakContext = Wait_key_breakContext; 
AMOSParser.Variable_starterContext = Variable_starterContext; 
AMOSParser.Function_starterContext = Function_starterContext; 
AMOSParser.Function_call_or_array_accessContext = Function_call_or_array_accessContext; 
AMOSParser.Array_structureContext = Array_structureContext; 
AMOSParser.Array_createContext = Array_createContext; 
AMOSParser.Array_updateContext = Array_updateContext; 
AMOSParser.Screen_openContext = Screen_openContext; 
AMOSParser.Curs_offContext = Curs_offContext; 
AMOSParser.Curs_onContext = Curs_onContext; 
AMOSParser.InkContext = InkContext; 
AMOSParser.TextContext = TextContext; 
AMOSParser.Do_loopContext = Do_loopContext; 
AMOSParser.While_wendContext = While_wendContext; 
AMOSParser.For_loopContext = For_loopContext; 
AMOSParser.If_statementContext = If_statementContext; 
AMOSParser.Else_statementContext = Else_statementContext; 
AMOSParser.If_statement_key_stateContext = If_statement_key_stateContext; 
AMOSParser.BarContext = BarContext; 
AMOSParser.ProcedureContext = ProcedureContext; 
AMOSParser.Current_Key_StateContext = Current_Key_StateContext; 
AMOSParser.Print_optionsContext = Print_optionsContext; 
AMOSParser.Print_somethingContext = Print_somethingContext; 
